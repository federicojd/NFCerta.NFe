// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.392
//    <NameSpace>ConsoleApplication2</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>True</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><GenerateShouldSerialize>False</GenerateShouldSerialize><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings>
//  </auto-generated>
// ------------------------------------------------------------------------------

using System.Xml;

#pragma warning disable
namespace NFCerta.NFe.Schemas
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using NFCerta.NFe.Schemas.TiposBasicos;
    using Util;

    /// <summary>
    /// Tipo Nota Fiscal Eletrônica
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true, ElementName = "NFe")]
    public partial class TNFe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Informações da Nota Fiscal eletrônica
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFe infNFe { get; set; }
        [XmlElement(Namespace = "http://www.w3.org/2000/09/xmldsig#", Order = 1)]
        public SignatureType Signature { get; set; }

        /// <summary>
        /// TNFe class constructor
        /// </summary>
        public TNFe()
        {
            Signature = new SignatureType();
            infNFe = new TNFeInfNFe()
            {
                cana = null,
                autXML = null,
                avulsa = null,
                cobr = null,
                det = null,
                compra = null,
                dest = null,
                emit = null,
                exporta = null,
                entrega = null,
                ide = null,
                transp = null,
                pag = null,
                retirada = null,
                total = null,
                infAdic = null
            };
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();

                Serializer.Serialize(new SefazXmlTextWriter(memoryStream), this, SerializerHelpers.Namespace.Value);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFe Deserialize(Stream s)
        {
            return ((TNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Informações da Nota Fiscal eletrônica
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// identificação da NF-e
        /// </summary>
        [XmlElement(Order = 0)]
        public IdentificacaoNFe ide { get; set; }
        /// <summary>
        /// Identificação do emitente
        /// </summary>
        [XmlElement(Order = 1)]
        public InformacoesEmitente emit { get; set; }
        /// <summary>
        /// Emissão de avulsa, informar os dados do Fisco emitente
        /// </summary>
        [XmlElement(Order = 2)]
        public TNFeInfNFeAvulsa avulsa { get; set; }
        /// <summary>
        /// Identificação do Destinatário
        /// </summary>
        [XmlElement(Order = 3)]
        public TNFeInfNFeDest dest { get; set; }
        /// <summary>
        /// Identificação do Local de Retirada (informar apenas quando for diferente do endereço do remetente)
        /// </summary>
        [XmlElement(Order = 4)]
        public TLocal retirada { get; set; }
        /// <summary>
        /// Identificação do Local de Entrega (informar apenas quando for diferente do endereço do destinatário)
        /// </summary>
        [XmlElement(Order = 5)]
        public TLocal entrega { get; set; }
        /// <summary>
        /// Pessoas autorizadas para o download do XML da NF-e
        /// </summary>
        [XmlElement("autXML", Order = 6)]
        public List<TNFeInfNFeAutXML> autXML { get; set; }
        /// <summary>
        /// Dados dos detalhes da NF-e
        /// </summary>
        [XmlElement("det", Order = 7)]
        public List<InformacoesDetalhe> det { get; set; }
        /// <summary>
        /// Dados dos totais da NF-e
        /// </summary>
        [XmlElement(Order = 8)]
        public NFeTotal total { get; set; }
        /// <summary>
        /// Dados dos transportes da NF-e
        /// </summary>
        [XmlElement(Order = 9)]
        public NFeTransp transp { get; set; }
        /// <summary>
        /// Dados da cobrança da NF-e
        /// </summary>
        [XmlElement(Order = 10)]
        public TNFeInfNFeCobr cobr { get; set; }
        /// <summary>
        /// Dados de Pagamento. Obrigatório apenas para (NFC-e) NT 2012/004
        /// </summary>
        [XmlElement("pag", Order = 11)]
        public List<NFePag> pag { get; set; }
        /// <summary>
        /// Informações adicionais da NF-e
        /// </summary>
        [XmlElement(Order = 12)]
        public NFeInfAdicional infAdic { get; set; }
        /// <summary>
        /// Informações de exportação
        /// </summary>
        [XmlElement(Order = 13)]
        public TNFeInfNFeExporta exporta { get; set; }
        /// <summary>
        /// Informações de compras  (Nota de Empenho, Pedido e Contrato)
        /// </summary>
        [XmlElement(Order = 14)]
        public TNFeInfNFeCompra compra { get; set; }
        /// <summary>
        /// Informações de registro aquisições de cana
        /// </summary>
        [XmlElement(Order = 15)]
        public TNFeInfNFeCana cana { get; set; }
        /// <summary>
        /// Versão do leiaute (v2.0)
        /// </summary>
        [XmlAttribute]
        public string versao { get; set; }
        /// <summary>
        /// PL_005d - 11/08/09 - validação do Id
        /// </summary>
        [XmlAttributeAttribute(DataType = "ID")]
        public string Id { get; set; }

        /// <summary>
        /// TNFeInfNFe class constructor
        /// </summary>
        public TNFeInfNFe()
        {
            cana = null;
            compra = null;
            exporta = null;
            infAdic = null;
            pag = null;
            cobr = null;
            transp = null;
            total = null;
            det = null;
            autXML = null;
            entrega = null;
            retirada = null;
            dest = null;
            avulsa = null;
            emit = null;
            ide = null;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                var ns = new XmlSerializerNamespaces();
                ns.Add("xmlns","http://www.portalfiscal.inf.br/nfe");
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this, ns);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFe Deserialize(Stream s)
        {
            return ((TNFeInfNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// identificação da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class IdentificacaoNFe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.
        /// </summary>
        [XmlElement(Order = 0)]
        public CodUfIbge cUF { get; set; }
        /// <summary>
        /// Código numérico que compõe a Chave de Acesso. Número aleatório gerado pelo emitente para cada NF-e.
        /// </summary>
        [XmlElement(Order = 1)]
        public string cNF { get; set; }
        /// <summary>
        /// Descrição da Natureza da Operação
        /// </summary>
        [XmlElement(Order = 2)]
        public string natOp { get; set; }
        /// <summary>
        /// Indicador da forma de pagamento:
        /// 0  pagamento à vista;
        /// 1  pagamento à prazo;
        /// 2  outros.
        /// </summary>
        [XmlElement(Order = 3)]
        public IndicadorFormaPgto indPag { get; set; }
        /// <summary>
        /// Código do modelo do Documento Fiscal. 55 = NF-e; 65 = NFC-e.
        /// </summary>
        [XmlElement(Order = 4)]
        public ModeloDocumento mod { get; set; }
        /// <summary>
        /// Série do Documento Fiscal
        /// série normal 0-889
        /// Avulsa Fisco 890-899
        /// SCAN 900-999
        /// </summary>
        [XmlElement(Order = 5)]
        public string serie { get; set; }
        /// <summary>
        /// Número do Documento Fiscal
        /// </summary>
        [XmlElement(Order = 6)]
        public string nNF { get; set; }
        /// <summary>
        /// Data e Hora de emissão do Documento Fiscal (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00
        /// </summary>
        [XmlElement(Order = 7)]
        public string dhEmi { get; set; }
        /// <summary>
        /// Data e Hora da saída ou de entrada da mercadoria / produto (AAAA-MM-DDTHH:mm:ssTZD)
        /// </summary>
        [XmlElement(Order = 8)]
        public string dhSaiEnt { get; set; }
        /// <summary>
        /// Tipo do Documento Fiscal (0 - entrada; 1 - saída)
        /// </summary>
        [XmlElement(Order = 9)]
        public TipoNotaFiscal tpNF { get; set; }
        /// <summary>
        /// Identificador de Local de destino da operação (1-Interna;2-Interestadual;3-Exterior)
        /// </summary>
        [XmlElement(Order = 10)]
        public IndicadorLocalDestino idDest { get; set; }
        /// <summary>
        /// Código do Município de Ocorrência do Fato Gerador (utilizar a tabela do IBGE)
        /// </summary>
        [XmlElement(Order = 11)]
        public string cMunFG { get; set; }
        /// <summary>
        /// Formato de impressão do DANFE (0-sem DANFE;1-DANFe Retrato; 2-DANFe Paisagem;3-DANFe Simplificado;
        /// 4-DANFe NFC-e;5-DANFe NFC-e em mensagem eletrônica)
        /// </summary>
        [XmlElement(Order = 12)]
        public TipoImpressaoNFe tpImp { get; set; }
        /// <summary>
        /// Forma de emissão da NF-e
        /// 1 - Normal;
        /// 2 - Contingência FS
        /// 3 - Contingência SCAN
        /// 4 - Contingência DPEC
        /// 5 - Contingência FSDA
        /// 6 - Contingência SVC - AN
        /// 7 - Contingência SVC - RS
        /// 9 - Contingência off-line NFC-e
        /// </summary>
        [XmlElement(Order = 13)]
        public TipoEmissaoNFe tpEmis { get; set; }
        /// <summary>
        /// Digito Verificador da Chave de Acesso da NF-e
        /// </summary>
        [XmlElement(Order = 14)]
        public string cDV { get; set; }
        /// <summary>
        /// Identificação do Ambiente:
        /// 1 - Produção
        /// 2 - Homologação
        /// </summary>
        [XmlElement(Order = 15)]
        public AmbienteSefaz tpAmb { get; set; }
        /// <summary>
        /// Finalidade da emissão da NF-e:
        /// 1 - NFe normal
        /// 2 - NFe complementar
        /// 3 - NFe de ajuste
        /// 4 - Devolução/Retorno
        /// </summary>
        [XmlElement(Order = 16)]
        public FinalidadeNFe finNFe { get; set; }
        /// <summary>
        /// Indica operação com consumidor final (0-Não;1-Consumidor Final)
        /// </summary>
        [XmlElement(Order = 17)]
        public OperacaoComConsumidorFinal indFinal { get; set; }
        /// <summary>
        /// Indicador de presença do comprador no estabelecimento comercial no momento da oepração
        /// (0-Não se aplica (ex.: Nota Fiscal complementar ou de ajuste;1-Operação presencial;2-Não presencial, internet;3-Não presencial, teleatendimento;4-NFC-e entrega em domicílio;9-Não presencial, outros)
        /// </summary>
        [XmlElement(Order = 18)]
        public IndicadorPresencaComprador indPres { get; set; }
        /// <summary>
        /// Processo de emissão utilizado com a seguinte codificação:
        /// 0 - emissão de NF-e com aplicativo do contribuinte;
        /// 1 - emissão de NF-e avulsa pelo Fisco;
        /// 2 - emissão de NF-e avulsa, pelo contribuinte com seu certificado digital, através do site
        /// do Fisco;
        /// 3- emissão de NF-e pelo contribuinte com aplicativo fornecido pelo Fisco.
        /// </summary>
        [XmlElement(Order = 19)]
        public ProcessoEmissao procEmi { get; set; }
        /// <summary>
        /// versão do aplicativo utilizado no processo de
        /// emissão
        /// </summary>
        [XmlElement(Order = 20)]
        public string verProc { get; set; }
        /// <summary>
        /// Informar a data e hora de entrada em contingência contingência no formato  (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00.
        /// </summary>
        [XmlElement(Order = 21)]
        public string dhCont { get; set; }
        /// <summary>
        /// Informar a Justificativa da entrada
        /// </summary>
        [XmlElement(Order = 22)]
        public string xJust { get; set; }
        /// <summary>
        /// Grupo de infromações da NF referenciada
        /// </summary>
        [XmlElement("NFref", Order = 23)]
        public List<TNFeInfNFeIdeNFref> NFref { get; set; }

        /// <summary>
        /// TNFeInfNFeIde class constructor
        /// </summary>
        public IdentificacaoNFe()
        {
            NFref = new List<TNFeInfNFeIdeNFref>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(IdentificacaoNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IdentificacaoNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(IdentificacaoNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IdentificacaoNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static IdentificacaoNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((IdentificacaoNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IdentificacaoNFe Deserialize(Stream s)
        {
            return ((IdentificacaoNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeIde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IdentificacaoNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(IdentificacaoNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IdentificacaoNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IdentificacaoNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum IndicadorFormaPgto
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Vista,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Prazo,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Outros,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TipoNotaFiscal
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Entrada,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Saida,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum IndicadorLocalDestino
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Interna,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TipoImpressaoNFe
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        SemDanfe,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        DanfeRetrato,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        DanfePaisagem,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        DanfeSimplificado,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        DanfeNFCe,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        DanfeNFCeEmail,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TipoEmissaoNFe
    {

        /// <summary>
        /// emissão normal
        /// </summary>
        [XmlEnumAttribute("1")]
        Normal = 1,

        /// <summary>
        /// emissão em contingência com impressão do DANFE em Formulário de Segurança
        /// </summary>
        [XmlEnumAttribute("2")]
        ContingenciaFS = 2,

        /// <summary>
        /// emissão em contingência no Sistema de Contingência do Ambiente Nacional  SCAN
        /// </summary>
        [XmlEnumAttribute("3")]
        ContingenciaSCAN = 3,

        /// <summary>
        /// emissão em contingência com envio da Declaração Prévia de Emissão em Contingência  DPEC
        /// </summary>
        [XmlEnumAttribute("4")]
        ContingenciaDPEC = 4,

        /// <summary>
        /// emissão em contingência com impressão do DANFE em Formulário de Segurança para Impressão de Documento Auxiliar de Documento Fiscal Eletrônico (FSDA)
        /// </summary>
        [XmlEnumAttribute("5")]
        ContingênciaFS_DA = 5,

        /// <summary>
        /// emissão em contingência na SEFAZ Virtual do Ambiente Nacional
        /// </summary>
        [XmlEnumAttribute("6")]
        ContingenciaSVC_AN = 6,

        /// <summary>
        /// emissão em contingência na SEFAZ Virtual do RS
        /// </summary>
        [XmlEnumAttribute("7")]
        ContingenciaSVC_RS = 7,

        /// <summary>
        ///  Contingência off-line da NFC-e
        /// </summary>
        [XmlEnumAttribute("9")]
        ContingenciaOffline = 9,
    }

    /// <summary>
    /// Tipo Finalidade da NF-e (!=Normal; 2=Complementar; 3=Ajuste; 4=Devolução/Retorno)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum FinalidadeNFe
    {

        [XmlEnumAttribute("1")]
        Normal,

        [XmlEnumAttribute("2")]
        Item2,

        [XmlEnumAttribute("3")]
        Item3,

        [XmlEnumAttribute("4")]
        Item4,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum OperacaoComConsumidorFinal
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Sim,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum IndicadorPresencaComprador
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        NaoSeAplica,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Presencial,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,
    }

    /// <summary>
    /// Tipo processo de emissão da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum ProcessoEmissao
    {

        [XmlEnumAttribute("0")]
        AplicativoContribuinte,

        [XmlEnumAttribute("1")]
        Item1,

        [XmlEnumAttribute("2")]
        Item2,

        [XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Grupo de infromações da NF referenciada
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFref
    {

        private static XmlSerializer serializer;

        [XmlElement("refCTe", typeof(string), Order = 0)]
        [XmlElement("refECF", typeof(TNFeInfNFeIdeNFrefRefECF), Order = 0)]
        [XmlElement("refNF", typeof(TNFeInfNFeIdeNFrefRefNF), Order = 0)]
        [XmlElement("refNFP", typeof(TNFeInfNFeIdeNFrefRefNFP), Order = 0)]
        [XmlElement("refNFe", typeof(string), Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item { get; set; }
        [XmlElement(Order = 1)]
        [XmlIgnore]
        public TNFeInfNFeIdeNFrefItemChoiceType1 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFref));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFref object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFref object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFref object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFref obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFref);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeIdeNFref obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFref Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeIdeNFref)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeIdeNFref Deserialize(Stream s)
        {
            return ((TNFeInfNFeIdeNFref)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFref object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFref object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFref object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFref obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFref);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFref obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFref LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Grupo do Cupom Fiscal vinculado à NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefECF
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código do modelo do Documento Fiscal
        /// Preencher com "2B", quando se tratar de Cupom Fiscal emitido por máquina registradora (não ECF), com "2C", quando se tratar de Cupom Fiscal PDV, ou "2D", quando se tratar de Cupom Fiscal (emitido por ECF)
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeIdeNFrefRefECFMod mod { get; set; }
        /// <summary>
        /// Informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e
        /// </summary>
        [XmlElement(Order = 1)]
        public string nECF { get; set; }
        /// <summary>
        /// Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e
        /// </summary>
        [XmlElement(Order = 2)]
        public string nCOO { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFrefRefECF));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefECF object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefECF object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefECF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefECF obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefECF);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefECF obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefECF Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeIdeNFrefRefECF)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeIdeNFrefRefECF Deserialize(Stream s)
        {
            return ((TNFeInfNFeIdeNFrefRefECF)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefECF object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefECF object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefECF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefECF obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefECF);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefECF obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefECF LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefECFMod
    {

        /// <remarks/>
        [XmlEnumAttribute("2B")]
        Item2B,

        /// <remarks/>
        [XmlEnumAttribute("2C")]
        Item2C,

        /// <remarks/>
        [XmlEnumAttribute("2D")]
        Item2D,
    }

    /// <summary>
    /// Tipo Dados do Veículo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TVeiculo
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Placa do veículo (NT2011/004)
        /// </summary>
        [XmlElement(Order = 0)]
        public string placa { get; set; }
        /// <summary>
        /// Sigla da UF
        /// </summary>
        [XmlElement(Order = 1)]
        public TUf UF { get; set; }
        /// <summary>
        /// Registro Nacional de Transportador de Carga (ANTT)
        /// </summary>
        [XmlElement(Order = 2)]
        public string RNTC { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TVeiculo));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TVeiculo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TVeiculo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TVeiculo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TVeiculo obj, out Exception exception)
        {
            exception = null;
            obj = default(TVeiculo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TVeiculo obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TVeiculo Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TVeiculo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TVeiculo Deserialize(Stream s)
        {
            return ((TVeiculo)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TVeiculo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TVeiculo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TVeiculo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TVeiculo obj, out Exception exception)
        {
            exception = null;
            obj = default(TVeiculo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TVeiculo obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TVeiculo LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo: Dados do IPI
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TIpi
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Classe de Enquadramento do IPI para Cigarros e Bebidas
        /// </summary>
        [XmlElement(Order = 0)]
        public string clEnq { get; set; }
        /// <summary>
        /// CNPJ do produtor da mercadoria, quando diferente do emitente. Somente para os casos de exportação direta ou indireta.
        /// </summary>
        [XmlElement(Order = 1)]
        public string CNPJProd { get; set; }
        /// <summary>
        /// Código do selo de controle do IPI
        /// </summary>
        [XmlElement(Order = 2)]
        public string cSelo { get; set; }
        /// <summary>
        /// Quantidade de selo de controle do IPI
        /// </summary>
        [XmlElement(Order = 3)]
        public string qSelo { get; set; }
        /// <summary>
        /// Código de Enquadramento Legal do IPI (tabela a ser criada pela RFB)
        /// </summary>
        [XmlElement(Order = 4)]
        public string cEnq { get; set; }
        [XmlElement("IPINT", typeof(TIpiIPINT), Order = 5)]
        [XmlElement("IPITrib", typeof(TIpiIPITrib), Order = 5)]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TIpi));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TIpi object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TIpi object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TIpi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TIpi obj, out Exception exception)
        {
            exception = null;
            obj = default(TIpi);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TIpi obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TIpi Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TIpi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TIpi Deserialize(Stream s)
        {
            return ((TIpi)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TIpi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TIpi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TIpi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TIpi obj, out Exception exception)
        {
            exception = null;
            obj = default(TIpi);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TIpi obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TIpi LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TIpiIPINT
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código da Situação Tributária do IPI:
        /// 01-Entrada tributada com alíquota zero
        /// 02-Entrada isenta
        /// 03-Entrada não-tributada
        /// 04-Entrada imune
        /// 05-Entrada com suspensão
        /// 51-Saída tributada com alíquota zero
        /// 52-Saída isenta
        /// 53-Saída não-tributada
        /// 54-Saída imune
        /// 55-Saída com suspensão
        /// </summary>
        [XmlElement(Order = 0)]
        public TIpiIPINTCST CST { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TIpiIPINT));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TIpiIPINT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TIpiIPINT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TIpiIPINT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TIpiIPINT obj, out Exception exception)
        {
            exception = null;
            obj = default(TIpiIPINT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TIpiIPINT obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TIpiIPINT Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TIpiIPINT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TIpiIPINT Deserialize(Stream s)
        {
            return ((TIpiIPINT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TIpiIPINT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TIpiIPINT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TIpiIPINT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TIpiIPINT obj, out Exception exception)
        {
            exception = null;
            obj = default(TIpiIPINT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TIpiIPINT obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TIpiIPINT LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TIpiIPINTCST
    {

        /// <remarks/>
        [XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [XmlEnumAttribute("02")]
        Item02,

        /// <remarks/>
        [XmlEnumAttribute("03")]
        Item03,

        /// <remarks/>
        [XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [XmlEnumAttribute("05")]
        Item05,

        /// <remarks/>
        [XmlEnumAttribute("51")]
        Item51,

        /// <remarks/>
        [XmlEnumAttribute("52")]
        Item52,

        /// <remarks/>
        [XmlEnumAttribute("53")]
        Item53,

        /// <remarks/>
        [XmlEnumAttribute("54")]
        Item54,

        /// <remarks/>
        [XmlEnumAttribute("55")]
        Item55,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TIpiIPITrib
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código da Situação Tributária do IPI:
        /// 00-Entrada com recuperação de crédito
        /// 49 - Outras entradas
        /// 50-Saída tributada
        /// 99-Outras saídas
        /// </summary>
        [XmlElement(Order = 0)]
        public TIpiIPITribCST CST { get; set; }
        [XmlElement("pIPI", Order = 1)]
        [XmlElement("qUnid", Order = 1)]
        [XmlElement("vBC", Order = 1)]
        [XmlElement("vUnid", Order = 1)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items { get; set; }
        [XmlElement("ItemsElementName", Order = 2)]
        [XmlIgnore]
        public TIpiIPITribItemsChoiceType[] ItemsElementName { get; set; }
        /// <summary>
        /// Valor do IPI
        /// </summary>
        [XmlElement(Order = 3)]
        public string vIPI { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TIpiIPITrib));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TIpiIPITrib object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TIpiIPITrib object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TIpiIPITrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TIpiIPITrib obj, out Exception exception)
        {
            exception = null;
            obj = default(TIpiIPITrib);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TIpiIPITrib obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TIpiIPITrib Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TIpiIPITrib)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TIpiIPITrib Deserialize(Stream s)
        {
            return ((TIpiIPITrib)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TIpiIPITrib object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TIpiIPITrib object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TIpiIPITrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TIpiIPITrib obj, out Exception exception)
        {
            exception = null;
            obj = default(TIpiIPITrib);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TIpiIPITrib obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TIpiIPITrib LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TIpiIPITribCST
    {

        /// <remarks/>
        [XmlEnumAttribute("00")]
        Item00,

        /// <remarks/>
        [XmlEnumAttribute("49")]
        Item49,

        /// <remarks/>
        [XmlEnumAttribute("50")]
        Item50,

        /// <remarks/>
        [XmlEnumAttribute("99")]
        Item99,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TIpiIPITribItemsChoiceType
    {

        /// <remarks/>
        pIPI,

        /// <remarks/>
        qUnid,

        /// <remarks/>
        vBC,

        /// <remarks/>
        vUnid,
    }

    /// <summary>
    /// Tipo Dados do Local de Retirada ou Entrega // 24/10/08 - tamanho mínimo // v2.0
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TLocal
    {

        private static XmlSerializer serializer;

        [XmlElement("CNPJ", Order = 0)]
        [XmlElement("CPF", Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [XmlElement(Order = 1)]
        [XmlIgnore]
        public TLocalItemChoiceType4 ItemElementName { get; set; }
        /// <summary>
        /// Logradouro
        /// </summary>
        [XmlElement(Order = 2)]
        public string xLgr { get; set; }
        /// <summary>
        /// Número
        /// </summary>
        [XmlElement(Order = 3)]
        public string nro { get; set; }
        /// <summary>
        /// Complemento
        /// </summary>
        [XmlElement(Order = 4)]
        public string xCpl { get; set; }
        /// <summary>
        /// Bairro
        /// </summary>
        [XmlElement(Order = 5)]
        public string xBairro { get; set; }
        /// <summary>
        /// Código do município (utilizar a tabela do IBGE)
        /// </summary>
        [XmlElement(Order = 6)]
        public string cMun { get; set; }
        /// <summary>
        /// Nome do município
        /// </summary>
        [XmlElement(Order = 7)]
        public string xMun { get; set; }
        /// <summary>
        /// Sigla da UF
        /// </summary>
        [XmlElement(Order = 8)]
        public TUf UF { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TLocal));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TLocal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TLocal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TLocal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TLocal obj, out Exception exception)
        {
            exception = null;
            obj = default(TLocal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TLocal obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TLocal Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TLocal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TLocal Deserialize(Stream s)
        {
            return ((TLocal)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TLocal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TLocal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TLocal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TLocal obj, out Exception exception)
        {
            exception = null;
            obj = default(TLocal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TLocal obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TLocal LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TLocalItemChoiceType4
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    /// <summary>
    /// Tipo Dados do Endereço  // 24/10/08 - tamanho mínimo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TEndereco
    {

        private System.Nullable<Tpais> _cPais;

        private static XmlSerializer serializer;

        /// <summary>
        /// Logradouro
        /// </summary>
        [XmlElement(Order = 0)]
        public string xLgr { get; set; }
        /// <summary>
        /// Número
        /// </summary>
        [XmlElement(Order = 1)]
        public string nro { get; set; }
        /// <summary>
        /// Complemento
        /// </summary>
        [XmlElement(Order = 2)]
        public string xCpl { get; set; }
        /// <summary>
        /// Bairro
        /// </summary>
        [XmlElement(Order = 3)]
        public string xBairro { get; set; }
        /// <summary>
        /// Código do município (utilizar a tabela do IBGE), informar 9999999 para operações com o exterior.
        /// </summary>
        [XmlElement(Order = 4)]
        public string cMun { get; set; }
        /// <summary>
        /// Nome do município, informar EXTERIOR para operações com o exterior.
        /// </summary>
        [XmlElement(Order = 5)]
        public string xMun { get; set; }
        /// <summary>
        /// Sigla da UF, informar EX para operações com o exterior.
        /// </summary>
        [XmlElement(Order = 6)]
        public TUf UF { get; set; }
        /// <summary>
        /// CEP
        /// </summary>
        [XmlElement(Order = 7)]
        public string CEP { get; set; }
        /// <summary>
        /// Nome do país
        /// </summary>
        [XmlElement(Order = 9)]
        public string xPais { get; set; }
        /// <summary>
        /// Telefone, preencher com Código DDD + número do telefone , nas operações com exterior é permtido informar o código do país + código da localidade + número do telefone
        /// </summary>
        [XmlElement(Order = 10)]
        public string fone { get; set; }

        /// <summary>
        /// Código do país
        /// </summary>
        [XmlElement(Order = 8)]
        public Tpais cPais
        {
            get
            {
                if (_cPais.HasValue)
                {
                    return _cPais.Value;
                }
                else
                {
                    return default(Tpais);
                }
            }
            set
            {
                _cPais = value;
            }
        }

        [XmlIgnore]
        public bool cPaisSpecified
        {
            get
            {
                return _cPais.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _cPais = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TEndereco));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEndereco object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEndereco object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEndereco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TEndereco obj, out Exception exception)
        {
            exception = null;
            obj = default(TEndereco);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TEndereco obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TEndereco Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TEndereco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TEndereco Deserialize(Stream s)
        {
            return ((TEndereco)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TEndereco object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TEndereco object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEndereco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TEndereco obj, out Exception exception)
        {
            exception = null;
            obj = default(TEndereco);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TEndereco obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TEndereco LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo Dados do Endereço do Emitente  // 24/10/08 - desmembrado / tamanho mínimo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TEnderEmi
    {

        private System.Nullable<TEnderEmiCPais> _cPais;

        private System.Nullable<TEnderEmiXPais> _xPais;

        private static XmlSerializer serializer;

        /// <summary>
        /// Logradouro
        /// </summary>
        [XmlElement(Order = 0)]
        public string xLgr { get; set; }
        /// <summary>
        /// Número
        /// </summary>
        [XmlElement(Order = 1)]
        public string nro { get; set; }
        /// <summary>
        /// Complemento
        /// </summary>
        [XmlElement(Order = 2)]
        public string xCpl { get; set; }
        /// <summary>
        /// Bairro
        /// </summary>
        [XmlElement(Order = 3)]
        public string xBairro { get; set; }
        /// <summary>
        /// Código do município
        /// </summary>
        [XmlElement(Order = 4)]
        public string cMun { get; set; }
        /// <summary>
        /// Nome do município
        /// </summary>
        [XmlElement(Order = 5)]
        public string xMun { get; set; }
        /// <summary>
        /// Sigla da UF
        /// </summary>
        [XmlElement(Order = 6)]
        public TUfEmi UF { get; set; }
        /// <summary>
        /// CEP - NT 2011/004
        /// </summary>
        [XmlElement(Order = 7)]
        public string CEP { get; set; }
        /// <summary>
        /// Preencher com Código DDD + número do telefone (v.2.0)
        /// </summary>
        [XmlElement(Order = 10)]
        public string fone { get; set; }

        /// <summary>
        /// Código do país
        /// </summary>
        [XmlElement(Order = 8)]
        public TEnderEmiCPais cPais
        {
            get
            {
                if (_cPais.HasValue)
                {
                    return _cPais.Value;
                }
                else
                {
                    return default(TEnderEmiCPais);
                }
            }
            set
            {
                _cPais = value;
            }
        }

        [XmlIgnore]
        public bool cPaisSpecified
        {
            get
            {
                return _cPais.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _cPais = null;
                }
            }
        }

        /// <summary>
        /// Nome do país
        /// </summary>
        [XmlElement(Order = 9)]
        public TEnderEmiXPais xPais
        {
            get
            {
                if (_xPais.HasValue)
                {
                    return _xPais.Value;
                }
                else
                {
                    return default(TEnderEmiXPais);
                }
            }
            set
            {
                _xPais = value;
            }
        }

        [XmlIgnore]
        public bool xPaisSpecified
        {
            get
            {
                return _xPais.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _xPais = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TEnderEmi));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEnderEmi object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnderEmi object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnderEmi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TEnderEmi obj, out Exception exception)
        {
            exception = null;
            obj = default(TEnderEmi);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TEnderEmi obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TEnderEmi Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TEnderEmi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TEnderEmi Deserialize(Stream s)
        {
            return ((TEnderEmi)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TEnderEmi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TEnderEmi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEnderEmi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TEnderEmi obj, out Exception exception)
        {
            exception = null;
            obj = default(TEnderEmi);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TEnderEmi obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TEnderEmi LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TEnderEmiCPais
    {

        /// <remarks/>
        [XmlEnumAttribute("1058")]
        Brasil,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TEnderEmiXPais
    {

        /// <remarks/>
        Brasil,

        /// <remarks/>
        BRASIL,
    }

    /// <summary>
    /// Dados da NF modelo 1/1A referenciada
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefNF
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.
        /// </summary>
        [XmlElement(Order = 0)]
        public CodUfIbge cUF { get; set; }
        /// <summary>
        /// AAMM da emissão
        /// </summary>
        [XmlElement(Order = 1)]
        public string AAMM { get; set; }
        /// <summary>
        /// CNPJ do emitente do documento fiscal referenciado
        /// </summary>
        [XmlElement(Order = 2)]
        public string CNPJ { get; set; }
        /// <summary>
        /// Código do modelo do Documento Fiscal. Utilizar 01 para NF modelo 1/1A
        /// </summary>
        [XmlElement(Order = 3)]
        public TNFeInfNFeIdeNFrefRefNFMod mod { get; set; }
        /// <summary>
        /// Série do Documento Fiscal, informar zero se inexistente
        /// </summary>
        [XmlElement(Order = 4)]
        public string serie { get; set; }
        /// <summary>
        /// Número do Documento Fiscal
        /// </summary>
        [XmlElement(Order = 5)]
        public string nNF { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFrefRefNF));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNF object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefNF object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNF obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNF);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNF obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNF Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeIdeNFrefRefNF)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeIdeNFrefRefNF Deserialize(Stream s)
        {
            return ((TNFeInfNFeIdeNFrefRefNF)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNF object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefNF object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNF object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNF obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNF);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNF obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNF LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefNFMod
    {

        /// <remarks/>
        [XmlEnumAttribute("01")]
        Item01,
    }

    /// <summary>
    /// Grupo com as informações NF de produtor referenciada
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeIdeNFrefRefNFP
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código da UF do emitente do Documento FiscalUtilizar a Tabela do IBGE (Anexo IV - Tabela de UF, Município e País)
        /// </summary>
        [XmlElement(Order = 0)]
        public CodUfIbge cUF { get; set; }
        /// <summary>
        /// AAMM da emissão da NF de produtor
        /// </summary>
        [XmlElement(Order = 1)]
        public string AAMM { get; set; }
        [XmlElement("CNPJ", Order = 2)]
        [XmlElement("CPF", Order = 2)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [XmlElement(Order = 3)]
        [XmlIgnore]
        public TNFeInfNFeIdeNFrefRefNFPItemChoiceType ItemElementName { get; set; }
        /// <summary>
        /// IE do emitente da NF de Produtor
        /// </summary>
        [XmlElement(Order = 4)]
        public string IE { get; set; }
        /// <summary>
        /// Código do modelo do Documento Fiscal - utilizar 04 para NF de produtor  ou 01 para NF Avulsa
        /// </summary>
        [XmlElement(Order = 5)]
        public TNFeInfNFeIdeNFrefRefNFPMod mod { get; set; }
        /// <summary>
        /// Série do Documento Fiscal, informar zero se inexistentesérie
        /// </summary>
        [XmlElement(Order = 6)]
        public string serie { get; set; }
        /// <summary>
        /// Número do Documento Fiscal - 1  999999999
        /// </summary>
        [XmlElement(Order = 7)]
        public string nNF { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeIdeNFrefRefNFP));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNFP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeIdeNFrefRefNFP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNFP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNFP obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNFP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeIdeNFrefRefNFP obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNFP Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeIdeNFrefRefNFP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeIdeNFrefRefNFP Deserialize(Stream s)
        {
            return ((TNFeInfNFeIdeNFrefRefNFP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeIdeNFrefRefNFP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeIdeNFrefRefNFP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeIdeNFrefRefNFP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNFP obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeIdeNFrefRefNFP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeIdeNFrefRefNFP obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeIdeNFrefRefNFP LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeIdeNFrefRefNFPItemChoiceType
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeIdeNFrefRefNFPMod
    {

        /// <remarks/>
        [XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [XmlEnumAttribute("04")]
        Item04,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeIdeNFrefItemChoiceType1
    {

        /// <remarks/>
        refCTe,

        /// <remarks/>
        refECF,

        /// <remarks/>
        refNF,

        /// <remarks/>
        refNFP,

        /// <remarks/>
        refNFe,
    }

    /// <summary>
    /// Identificação do emitente
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class InformacoesEmitente
    {

        private static XmlSerializer serializer;

        [XmlElement("CNPJ", Order = 0)]
        [XmlElement("CPF", Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [XmlElement(Order = 1)]
        [XmlIgnore]
        public TipoDocumentoEmitente ItemElementName { get; set; }
        /// <summary>
        /// Razão Social ou Nome do emitente
        /// </summary>
        [XmlElement(Order = 2)]
        public string xNome { get; set; }
        /// <summary>
        /// Nome fantasia
        /// </summary>
        [XmlElement(Order = 3)]
        public string xFant { get; set; }
        /// <summary>
        /// Endereço do emitente
        /// </summary>
        [XmlElement(Order = 4)]
        public TEnderEmi enderEmit { get; set; }
        /// <summary>
        /// Inscrição Estadual do Emitente
        /// </summary>
        [XmlElement(Order = 5)]
        public string IE { get; set; }
        /// <summary>
        /// Inscricao Estadual do Substituto Tributário
        /// </summary>
        [XmlElement(Order = 6)]
        public string IEST { get; set; }
        /// <summary>
        /// Inscrição Municipal
        /// </summary>
        [XmlElement(Order = 7)]
        public string IM { get; set; }
        /// <summary>
        /// CNAE Fiscal
        /// </summary>
        [XmlElement(Order = 8)]
        public string CNAE { get; set; }
        /// <summary>
        /// Código de Regime Tributário.
        /// Este campo será obrigatoriamente preenchido com:
        /// 1  Simples Nacional;
        /// 2  Simples Nacional  excesso de sublimite de receita bruta;
        /// 3  Regime Normal.
        /// </summary>
        [XmlElement(Order = 9)]
        public CodigoRegimeTributario CRT { get; set; }

        /// <summary>
        /// TNFeInfNFeEmit class constructor
        /// </summary>
        public InformacoesEmitente()
        {
            enderEmit = new TEnderEmi();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(InformacoesEmitente));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeEmit object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeEmit object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out InformacoesEmitente obj, out Exception exception)
        {
            exception = null;
            obj = default(InformacoesEmitente);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out InformacoesEmitente obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static InformacoesEmitente Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((InformacoesEmitente)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static InformacoesEmitente Deserialize(Stream s)
        {
            return ((InformacoesEmitente)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeEmit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeEmit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out InformacoesEmitente obj, out Exception exception)
        {
            exception = null;
            obj = default(InformacoesEmitente);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out InformacoesEmitente obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static InformacoesEmitente LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoDocumentoEmitente
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum CodigoRegimeTributario
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Simples,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Emissão de avulsa, informar os dados do Fisco emitente
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeAvulsa
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// CNPJ do Órgão emissor
        /// </summary>
        [XmlElement(Order = 0)]
        public string CNPJ { get; set; }
        /// <summary>
        /// Órgão emitente
        /// </summary>
        [XmlElement(Order = 1)]
        public string xOrgao { get; set; }
        /// <summary>
        /// Matrícula do agente
        /// </summary>
        [XmlElement(Order = 2)]
        public string matr { get; set; }
        /// <summary>
        /// Nome do agente
        /// </summary>
        [XmlElement(Order = 3)]
        public string xAgente { get; set; }
        /// <summary>
        /// Telefone
        /// </summary>
        [XmlElement(Order = 4)]
        public string fone { get; set; }
        /// <summary>
        /// Sigla da Unidade da Federação
        /// </summary>
        [XmlElement(Order = 5)]
        public TUfEmi UF { get; set; }
        /// <summary>
        /// Número do Documento de Arrecadação de Receita
        /// </summary>
        [XmlElement(Order = 6)]
        public string nDAR { get; set; }
        /// <summary>
        /// Data de emissão do DAR (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 7)]
        public string dEmi { get; set; }
        /// <summary>
        /// Valor Total constante no DAR
        /// </summary>
        [XmlElement(Order = 8)]
        public string vDAR { get; set; }
        /// <summary>
        /// Repartição Fiscal emitente
        /// </summary>
        [XmlElement(Order = 9)]
        public string repEmi { get; set; }
        /// <summary>
        /// Data de pagamento do DAR (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 10)]
        public string dPag { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeAvulsa));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeAvulsa object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeAvulsa object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAvulsa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeAvulsa obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAvulsa);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeAvulsa obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeAvulsa Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeAvulsa)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeAvulsa Deserialize(Stream s)
        {
            return ((TNFeInfNFeAvulsa)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeAvulsa object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeAvulsa object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAvulsa object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeAvulsa obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAvulsa);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeAvulsa obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeAvulsa LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Identificação do Destinatário
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDest
    {

        private static XmlSerializer serializer;

        [XmlElement("CNPJ", Order = 0)]
        [XmlElement("CPF", Order = 0)]
        [XmlElement("idEstrangeiro", Order = 0)]
        [XmlChoiceIdentifierAttribute("TipoDocumento")]
        public string Item { get; set; }

        [XmlElement(Order = 1)]
        [XmlIgnore]
        public TipoDocumento TipoDocumento { get; set; }
        /// <summary>
        /// Razão Social ou nome do destinatário
        /// </summary>
        [XmlElement(Order = 2)]
        public string xNome { get; set; }
        /// <summary>
        /// Dados do endereço
        /// </summary>
        [XmlElement(Order = 3)]
        public TEndereco enderDest { get; set; }
        /// <summary>
        /// Indicador da IE do destinatário:
        /// 1  Contribuinte ICMSpagamento à vista;
        /// 2  Contribuinte isento de inscrição;
        /// 9  Não Contribuinte
        /// </summary>
        [XmlElement(Order = 4)]
        public TNFeInfNFeDestIndIEDest indIEDest { get; set; }
        /// <summary>
        /// Inscrição Estadual (obrigatório nas operações com contribuintes do ICMS)
        /// </summary>
        [XmlElement(Order = 5)]
        public string IE { get; set; }
        /// <summary>
        /// Inscrição na SUFRAMA (Obrigatório nas operações com as áreas com benefícios de incentivos fiscais sob controle da SUFRAMA) PL_005d - 11/08/09 - alterado para aceitar 8 ou 9 dígitos
        /// </summary>
        [XmlElement(Order = 6)]
        public string ISUF { get; set; }
        /// <summary>
        /// Inscrição Municipal do tomador do serviço
        /// </summary>
        [XmlElement(Order = 7)]
        public string IM { get; set; }
        /// <summary>
        /// Informar o e-mail do destinatário. O campo pode ser utilizado para informar o e-mail
        /// de recepção da NF-e indicada pelo destinatário
        /// </summary>
        [XmlElement(Order = 8)]
        public string email { get; set; }

        /// <summary>
        /// TNFeInfNFeDest class constructor
        /// </summary>
        public TNFeInfNFeDest()
        {
            enderDest = new TEndereco();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDest));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDest object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDest object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDest obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDest);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDest obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDest Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDest Deserialize(Stream s)
        {
            return ((TNFeInfNFeDest)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDest obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDest);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDest obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDest LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TipoDocumento
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,

        /// <remarks/>
        idEstrangeiro,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDestIndIEDest
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,
    }

    /// <summary>
    /// Pessoas autorizadas para o download do XML da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeAutXML
    {

        private static XmlSerializer serializer;

        [XmlElement("CNPJ", Order = 0)]
        [XmlElement("CPF", Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [XmlElement(Order = 1)]
        [XmlIgnore]
        public TNFeInfNFeAutXMLItemChoiceType5 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeAutXML));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeAutXML object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeAutXML object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAutXML object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeAutXML obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAutXML);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeAutXML obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeAutXML Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeAutXML)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeAutXML Deserialize(Stream s)
        {
            return ((TNFeInfNFeAutXML)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeAutXML object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeAutXML object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeAutXML object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeAutXML obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeAutXML);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeAutXML obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeAutXML LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeAutXMLItemChoiceType5
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    /// <summary>
    /// Dados dos detalhes da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class InformacoesDetalhe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Dados dos produtos e serviços da NF-e
        /// </summary>
        [XmlElement(Order = 0)]
        public DetalhesProduto prod { get; set; }
        /// <summary>
        /// Tributos incidentes nos produtos ou serviços da NF-e
        /// </summary>
        [XmlElement(Order = 1)]
        public DetalhesImposto imposto { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoDevol impostoDevol { get; set; }
        /// <summary>
        /// Informações adicionais do produto (norma referenciada, informações complementares, etc)
        /// </summary>
        [XmlElement(Order = 3)]
        public string infAdProd { get; set; }
        /// <summary>
        /// Número do item do NF
        /// </summary>
        [XmlAttribute]
        public string nItem { get; set; }

        /// <summary>
        /// TNFeInfNFeDet class constructor
        /// </summary>
        public InformacoesDetalhe()
        {
            impostoDevol = null;
            imposto = new DetalhesImposto();
            prod = new DetalhesProduto();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(InformacoesDetalhe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out InformacoesDetalhe obj, out Exception exception)
        {
            exception = null;
            obj = default(InformacoesDetalhe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out InformacoesDetalhe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static InformacoesDetalhe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((InformacoesDetalhe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static InformacoesDetalhe Deserialize(Stream s)
        {
            return ((InformacoesDetalhe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out InformacoesDetalhe obj, out Exception exception)
        {
            exception = null;
            obj = default(InformacoesDetalhe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out InformacoesDetalhe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static InformacoesDetalhe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados dos produtos e serviços da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class DetalhesProduto
    {
        private static XmlSerializer serializer;

        /// <summary>
        /// Código do produto ou serviço. Preencher com CFOP caso se trate de itens não relacionados com mercadorias/produto e que o contribuinte não possua codificação própria
        /// Formato CFOP9999.
        /// </summary>
        [XmlElement(Order = 0)]
        public string cProd { get; set; }
        /// <summary>
        /// GTIN (Global Trade Item Number) do produto, antigo código EAN ou código de barras
        /// </summary>
        [XmlElement(Order = 1)]
        public string cEAN { get; set; }
        /// <summary>
        /// Descrição do produto ou serviço
        /// </summary>
        [XmlElement(Order = 2)]
        public string xProd { get; set; }
        /// <summary>
        /// Código NCM (8 posições), será permitida a informação do gênero (posição do capítulo do NCM) quando a operação não for de comércio exterior (importação/exportação) ou o produto não seja tributado pelo IPI. Em caso de item de serviço ou item que não tenham produto (Ex. transferência de crédito, crédito do ativo imobilizado, etc.), informar o código 00 (zeros) (v2.0)
        /// </summary>
        [XmlElement(Order = 3)]
        public string NCM { get; set; }
        /// <summary>
        /// Nomenclatura de Valor aduaneio e Estatístico
        /// </summary>
        [XmlElement("NVE", Order = 4)]
        public List<string> NVE { get; set; }
        /// <summary>
        /// Código EX TIPI (3 posições)
        /// </summary>
        [XmlElement(Order = 5)]
        public string EXTIPI { get; set; }
        /// <summary>
        /// Código Fiscal de Operações e Prestações
        /// </summary>
        [XmlElement(Order = 6)]
        public CFOP CFOP { get; set; }
        /// <summary>
        /// Unidade comercial
        /// </summary>
        [XmlElement(Order = 7)]
        public string uCom { get; set; }
        /// <summary>
        /// Quantidade Comercial  do produto, alterado para aceitar de 0 a 4 casas decimais e 11 inteiros.
        /// </summary>
        [XmlElement(Order = 8)]
        public string qCom { get; set; }
        /// <summary>
        /// Valor unitário de comercialização  - alterado para aceitar 0 a 10 casas decimais e 11 inteiros
        /// </summary>
        [XmlElement(Order = 9)]
        public string vUnCom { get; set; }
        /// <summary>
        /// Valor bruto do produto ou serviço.
        /// </summary>
        [XmlElement(Order = 10)]
        public string vProd { get; set; }
        /// <summary>
        /// GTIN (Global Trade Item Number) da unidade tributável, antigo código EAN ou código de barras
        /// </summary>
        [XmlElement(Order = 11)]
        public string cEANTrib { get; set; }
        /// <summary>
        /// Unidade Tributável
        /// </summary>
        [XmlElement(Order = 12)]
        public string uTrib { get; set; }
        /// <summary>
        /// Quantidade Tributável - alterado para aceitar de 0 a 4 casas decimais e 11 inteiros
        /// </summary>
        [XmlElement(Order = 13)]
        public string qTrib { get; set; }
        /// <summary>
        /// Valor unitário de tributação - - alterado para aceitar 0 a 10 casas decimais e 11 inteiros
        /// </summary>
        [XmlElement(Order = 14)]
        public string vUnTrib { get; set; }
        /// <summary>
        /// Valor Total do Frete
        /// </summary>
        [XmlElement(Order = 15)]
        public string vFrete { get; set; }
        /// <summary>
        /// Valor Total do Seguro
        /// </summary>
        [XmlElement(Order = 16)]
        public string vSeg { get; set; }
        /// <summary>
        /// Valor do Desconto
        /// </summary>
        [XmlElement(Order = 17)]
        public string vDesc { get; set; }
        /// <summary>
        /// Outras despesas acessórias
        /// </summary>
        [XmlElement(Order = 18)]
        public string vOutro { get; set; }
        /// <summary>
        /// Este campo deverá ser preenchido com:
        /// 0  o valor do item (vProd) não compõe o valor total da NF-e (vProd)
        /// 1   o valor do item (vProd) compõe o valor total da NF-e (vProd)
        /// </summary>
        [XmlElement(Order = 19)]
        public IndicadorProdutoValorTotal indTot { get; set; }
        /// <summary>
        /// Delcaração de Importação
        /// (NT 2011/004)
        /// </summary>
        [XmlElement("DI", Order = 20)]
        public List<TNFeInfNFeDetProdDI> DI { get; set; }
        /// <summary>
        /// Detalhe da exportação
        /// </summary>
        [XmlElement("detExport", Order = 21)]
        public List<TNFeInfNFeDetProdDetExport> detExport { get; set; }
        /// <summary>
        /// pedido de compra - Informação de interesse do emissor para controle do B2B.
        /// </summary>
        [XmlElement(Order = 22)]
        public string xPed { get; set; }
        /// <summary>
        /// Número do Item do Pedido de Compra - Identificação do número do item do pedido de Compra
        /// </summary>
        [XmlElement(Order = 23)]
        public string nItemPed { get; set; }
        /// <summary>
        /// Número de controle da FCI - Ficha de Conteúdo de Importação.
        /// </summary>
        [XmlElement(Order = 24)]
        public string nFCI { get; set; }
        [XmlElement("arma", typeof(TNFeInfNFeDetProdArma), Order = 25)]
        [XmlElement("comb", typeof(TNFeInfNFeDetProdComb), Order = 25)]
        [XmlElement("med", typeof(TNFeInfNFeDetProdMed), Order = 25)]
        [XmlElement("nRECOPI", typeof(string), Order = 25)]
        [XmlElement("veicProd", typeof(TNFeInfNFeDetProdVeicProd), Order = 25)]
        public List<object> Items { get; set; }

        /// <summary>
        /// TNFeInfNFeDetProd class constructor
        /// </summary>
        public DetalhesProduto()
        {
            Items = null;
            detExport = null;
            DI = null;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DetalhesProduto));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DetalhesProduto obj, out Exception exception)
        {
            exception = null;
            obj = default(DetalhesProduto);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DetalhesProduto obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DetalhesProduto Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DetalhesProduto)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DetalhesProduto Deserialize(Stream s)
        {
            return ((DetalhesProduto)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DetalhesProduto obj, out Exception exception)
        {
            exception = null;
            obj = default(DetalhesProduto);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DetalhesProduto obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DetalhesProduto LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo CFOP // maio/2009 - Atualização do Ajuste SINIEF 14/2009
    /// </summary>
    /// <summary>
    /// Tipo CFOP - PL_005d - 11/08/09 - atualizaçãp do Ajuste SINIEF 05/2009
    /// </summary>
    /// <summary>
    /// Tipo CFOP // 24/10/08 acrescentada a lista de CFOP validos // PL_06 eliminado os CFOP de prestação de serviços de comunicação // PL_006f eliminado os CFOP de prestação de serviços de transporte
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum CFOP
    {
        /// <summary>
        /// 5.101 - Venda de produção do estabelecimento;
        /// </summary>
        [XmlEnumAttribute("5101")]
        ProducaoEstabelecimento=5101,

        /// <summary>
        /// 5.102 - Venda de mercadoria de terceiros;
        /// </summary>
        [XmlEnumAttribute("5102")]
        MercadoriaTerceiros=5102,

        /// <summary>
        /// 5.115 - Venda de mercadoria de terceiros, recebida anteriormente em consignação mercantil;
        /// </summary>
        [XmlEnumAttribute("5115")]
        MercadoriaTerceirosConsignada=5115,

        /// <summary>
        /// 5.401 - Venda de produção do estabelecimento em operação com produto sujeito a ST, como contribuinte substituto;
        /// </summary>
        [XmlEnumAttribute("5401")]
        ProducaoEstabelecimentoSubstituto=5401,

        /// <summary>
        /// 5.403 - Venda de mercadoria de terceiros em operação com mercadoria sujeita a ST, como contribuinte substituto;
        /// </summary>
        [XmlEnumAttribute("5403")]
        MercadoriaTerceirosSubstituto=5403,

        /// <summary>
        /// 5.405 - Venda de mercadoria de terceiros, sujeita a ST, como contribuinte substituído;
        /// </summary>
        [XmlEnumAttribute("5405")]
        MercadoriaTerceirosSubstituido=5405,

        /// <summary>
        /// 5.656 - Venda de combustível ou lubrificante de terceiros, para consumidor final;
        /// </summary>
        [XmlEnumAttribute("5656")]
        Combustivel=5656,

        /// <summary>
        /// 5.933 - Prestação de serviço tributado pelo ISSQN (Nota Fiscal conjugada);
        /// </summary>
        [XmlEnumAttribute("5933")]
        Servico=5933,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum IndicadorProdutoValorTotal
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        CompoeValorTotalNFe,
    }

    /// <summary>
    /// Delcaração de Importação
    /// (NT 2011/004)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDI
    {

        private System.Nullable<TUfEmi> _uFTerceiro;

        private static XmlSerializer serializer;

        /// <summary>
        /// Numero do Documento de Importação DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E) (NT2011/004)
        /// </summary>
        [XmlElement(Order = 0)]
        public string nDI { get; set; }
        /// <summary>
        /// Data de registro da DI/DSI/DA (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 1)]
        public string dDI { get; set; }
        /// <summary>
        /// Local do desembaraço aduaneiro
        /// </summary>
        [XmlElement(Order = 2)]
        public string xLocDesemb { get; set; }
        /// <summary>
        /// UF onde ocorreu o desembaraço aduaneiro
        /// </summary>
        [XmlElement(Order = 3)]
        public TUfEmi UFDesemb { get; set; }
        /// <summary>
        /// Data do desembaraço aduaneiro (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 4)]
        public string dDesemb { get; set; }
        /// <summary>
        /// Via de transporte internacional informada na DI
        /// 1-Maritima;2-Fluvial;3-Lacustre;4-Aerea;5-Postal;6-Ferroviaria;7-Rodoviaria;8-Conduto;9-Meios Proprios;10-Entrada/Saida Ficta.
        /// </summary>
        [XmlElement(Order = 5)]
        public TNFeInfNFeDetProdDITpViaTransp tpViaTransp { get; set; }
        /// <summary>
        /// Valor Adicional ao frete para renovação de marinha mercante
        /// </summary>
        [XmlElement(Order = 6)]
        public string vAFRMM { get; set; }
        /// <summary>
        /// Forma de Importação quanto a intermediação
        /// 1-por conta propria;2-por conta e ordem;3-encomenda
        /// </summary>
        [XmlElement(Order = 7)]
        public TNFeInfNFeDetProdDITpIntermedio tpIntermedio { get; set; }
        /// <summary>
        /// CNPJ do adquirente ou do encomendante
        /// </summary>
        [XmlElement(Order = 8)]
        public string CNPJ { get; set; }
        /// <summary>
        /// Código do exportador (usado nos sistemas internos de informação do emitente da NF-e)
        /// </summary>
        [XmlElement(Order = 10)]
        public string cExportador { get; set; }
        /// <summary>
        /// Adições (NT 2011/004)
        /// </summary>
        [XmlElement("adi", Order = 11)]
        public List<TNFeInfNFeDetProdDIAdi> adi { get; set; }

        /// <summary>
        /// TNFeInfNFeDetProdDI class constructor
        /// </summary>
        public TNFeInfNFeDetProdDI()
        {
            adi = new List<TNFeInfNFeDetProdDIAdi>();
        }

        /// <summary>
        /// Sigla da UF do adquirente ou do encomendante
        /// </summary>
        [XmlElement(Order = 9)]
        public TUfEmi UFTerceiro
        {
            get
            {
                if (_uFTerceiro.HasValue)
                {
                    return _uFTerceiro.Value;
                }
                else
                {
                    return default(TUfEmi);
                }
            }
            set
            {
                _uFTerceiro = value;
            }
        }

        [XmlIgnore]
        public bool UFTerceiroSpecified
        {
            get
            {
                return _uFTerceiro.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _uFTerceiro = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdDI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDI obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdDI obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDI Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdDI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdDI Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdDI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDI obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDI obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDI LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdDITpViaTransp
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,

        /// <remarks/>
        [XmlEnumAttribute("6")]
        Item6,

        /// <remarks/>
        [XmlEnumAttribute("7")]
        Item7,

        /// <remarks/>
        [XmlEnumAttribute("8")]
        Item8,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,

        /// <remarks/>
        [XmlEnumAttribute("10")]
        Item10,

        /// <remarks/>
        [XmlEnumAttribute("11")]
        Item11,

        /// <remarks/>
        [XmlEnumAttribute("12")]
        Item12,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdDITpIntermedio
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Adições (NT 2011/004)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDIAdi
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Número da Adição
        /// </summary>
        [XmlElement(Order = 0)]
        public string nAdicao { get; set; }
        /// <summary>
        /// Número seqüencial do item dentro da Adição
        /// </summary>
        [XmlElement(Order = 1)]
        public string nSeqAdic { get; set; }
        /// <summary>
        /// Código do fabricante estrangeiro (usado nos sistemas internos de informação do emitente da NF-e)
        /// </summary>
        [XmlElement(Order = 2)]
        public string cFabricante { get; set; }
        /// <summary>
        /// Valor do desconto do item da DI  adição
        /// </summary>
        [XmlElement(Order = 3)]
        public string vDescDI { get; set; }
        /// <summary>
        /// Número do ato concessório de Drawback
        /// </summary>
        [XmlElement(Order = 4)]
        public string nDraw { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdDIAdi));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDIAdi object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDIAdi object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDIAdi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDIAdi obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDIAdi);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdDIAdi obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDIAdi Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdDIAdi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdDIAdi Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdDIAdi)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDIAdi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDIAdi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDIAdi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDIAdi obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDIAdi);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDIAdi obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDIAdi LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Detalhe da exportação
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDetExport
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Número do ato concessório de Drawback
        /// </summary>
        [XmlElement(Order = 0)]
        public string nDraw { get; set; }
        /// <summary>
        /// Exportação indireta
        /// </summary>
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetProdDetExportExportInd exportInd { get; set; }

        /// <summary>
        /// TNFeInfNFeDetProdDetExport class constructor
        /// </summary>
        public TNFeInfNFeDetProdDetExport()
        {
            exportInd = new TNFeInfNFeDetProdDetExportExportInd();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdDetExport));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDetExport object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDetExport object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDetExport object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDetExport obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDetExport);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdDetExport obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDetExport Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdDetExport)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdDetExport Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdDetExport)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDetExport object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDetExport object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDetExport object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDetExport obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDetExport);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDetExport obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDetExport LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Exportação indireta
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdDetExportExportInd
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Registro de exportação
        /// </summary>
        [XmlElement(Order = 0)]
        public string nRE { get; set; }
        /// <summary>
        /// Chave de acesso da NF-e recebida para exportação
        /// </summary>
        [XmlElement(Order = 1)]
        public string chNFe { get; set; }
        /// <summary>
        /// Quantidade do item efetivamente exportado
        /// </summary>
        [XmlElement(Order = 2)]
        public string qExport { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdDetExportExportInd));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDetExportExportInd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdDetExportExportInd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDetExportExportInd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdDetExportExportInd obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDetExportExportInd);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdDetExportExportInd obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDetExportExportInd Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdDetExportExportInd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdDetExportExportInd Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdDetExportExportInd)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdDetExportExportInd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdDetExportExportInd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdDetExportExportInd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDetExportExportInd obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdDetExportExportInd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdDetExportExportInd obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdDetExportExportInd LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Armamentos
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdArma
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Indicador do tipo de arma de fogo (0 - Uso permitido; 1 - Uso restrito)
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetProdArmaTpArma tpArma { get; set; }
        /// <summary>
        /// Número de série da arma
        /// </summary>
        [XmlElement(Order = 1)]
        public string nSerie { get; set; }
        /// <summary>
        /// Número de série do cano
        /// </summary>
        [XmlElement(Order = 2)]
        public string nCano { get; set; }
        /// <summary>
        /// Descrição completa da arma, compreendendo: calibre, marca, capacidade, tipo de funcionamento, comprimento e demais elementos que permitam a sua perfeita identificação.
        /// </summary>
        [XmlElement(Order = 3)]
        public string descr { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdArma));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdArma object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdArma object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdArma object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdArma obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdArma);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdArma obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdArma Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdArma)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdArma Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdArma)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdArma object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdArma object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdArma object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdArma obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdArma);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdArma obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdArma LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdArmaTpArma
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,
    }

    /// <summary>
    /// Informar apenas para operações com combustíveis líquidos
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdComb
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de produto da ANP. codificação de produtos do SIMP (http://www.anp.gov.br)
        /// </summary>
        [XmlElement(Order = 0)]
        public TcProdANP cProdANP { get; set; }
        /// <summary>
        /// Percentual de gas natural para o produto GLP
        /// </summary>
        [XmlElement(Order = 1)]
        public string pMixGN { get; set; }
        /// <summary>
        /// Código de autorização / registro do CODIF. Informar apenas quando a UF utilizar o CODIF (Sistema de Controle do 			Diferimento do Imposto nas Operações com AEAC - Álcool Etílico Anidro Combustível).
        /// </summary>
        [XmlElement(Order = 2)]
        public string CODIF { get; set; }
        /// <summary>
        /// Quantidade de combustível
        /// faturada à temperatura ambiente.
        /// Informar quando a quantidade
        /// faturada informada no campo
        /// qCom (I10) tiver sido ajustada para
        /// uma temperatura diferente da
        /// ambiente.
        /// </summary>
        [XmlElement(Order = 3)]
        public string qTemp { get; set; }
        /// <summary>
        /// Sigla da UF de Consumo
        /// </summary>
        [XmlElement(Order = 4)]
        public TUf UFCons { get; set; }
        /// <summary>
        /// CIDE Combustíveis
        /// </summary>
        [XmlElement(Order = 5)]
        public TNFeInfNFeDetProdCombCIDE CIDE { get; set; }

        /// <summary>
        /// TNFeInfNFeDetProdComb class constructor
        /// </summary>
        public TNFeInfNFeDetProdComb()
        {
            CIDE = new TNFeInfNFeDetProdCombCIDE();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdComb));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdComb object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdComb object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdComb object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdComb obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdComb);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdComb obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdComb Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdComb)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdComb Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdComb)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdComb object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdComb object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdComb object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdComb obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdComb);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdComb obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdComb LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Código de produto da ANP de acordo com o Sistema de Movimentação de produtos - SIMP
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TcProdANP
    {

        [XmlEnumAttribute("110203073")]
        Item110203073,

        [XmlEnumAttribute("110204001")]
        Item110204001,

        [XmlEnumAttribute("110204002")]
        Item110204002,

        [XmlEnumAttribute("140101027")]
        Item140101027,

        [XmlEnumAttribute("140101026")]
        Item140101026,

        [XmlEnumAttribute("740101005")]
        Item740101005,

        [XmlEnumAttribute("740101004")]
        Item740101004,

        [XmlEnumAttribute("740101001")]
        Item740101001,

        [XmlEnumAttribute("740101006")]
        Item740101006,

        [XmlEnumAttribute("740101002")]
        Item740101002,

        [XmlEnumAttribute("110203083")]
        Item110203083,

        [XmlEnumAttribute("910101001")]
        Item910101001,

        [XmlEnumAttribute("110103001")]
        Item110103001,

        [XmlEnumAttribute("330101001")]
        Item330101001,

        [XmlEnumAttribute("110203091")]
        Item110203091,

        [XmlEnumAttribute("120204001")]
        Item120204001,

        [XmlEnumAttribute("110106001")]
        Item110106001,

        [XmlEnumAttribute("120206001")]
        Item120206001,

        [XmlEnumAttribute("110101001")]
        Item110101001,

        [XmlEnumAttribute("110101042")]
        Item110101042,

        [XmlEnumAttribute("810201001")]
        Item810201001,

        [XmlEnumAttribute("110204003")]
        Item110204003,

        [XmlEnumAttribute("330201005")]
        Item330201005,

        [XmlEnumAttribute("330201006")]
        Item330201006,

        [XmlEnumAttribute("330201004")]
        Item330201004,

        [XmlEnumAttribute("110105001")]
        Item110105001,

        [XmlEnumAttribute("110203072")]
        Item110203072,

        [XmlEnumAttribute("110203001")]
        Item110203001,

        [XmlEnumAttribute("110201001")]
        Item110201001,

        [XmlEnumAttribute("110101002")]
        Item110101002,

        [XmlEnumAttribute("110203002")]
        Item110203002,

        [XmlEnumAttribute("120205010")]
        Item120205010,

        [XmlEnumAttribute("110203003")]
        Item110203003,

        [XmlEnumAttribute("110204004")]
        Item110204004,

        [XmlEnumAttribute("110204005")]
        Item110204005,

        [XmlEnumAttribute("110204006")]
        Item110204006,

        [XmlEnumAttribute("110204007")]
        Item110204007,

        [XmlEnumAttribute("110204008")]
        Item110204008,

        [XmlEnumAttribute("110204009")]
        Item110204009,

        [XmlEnumAttribute("110204010")]
        Item110204010,

        [XmlEnumAttribute("110204011")]
        Item110204011,

        [XmlEnumAttribute("110105027")]
        Item110105027,

        [XmlEnumAttribute("110103003")]
        Item110103003,

        [XmlEnumAttribute("110103002")]
        Item110103002,

        [XmlEnumAttribute("110105002")]
        Item110105002,

        [XmlEnumAttribute("110205001")]
        Item110205001,

        [XmlEnumAttribute("120203002")]
        Item120203002,

        [XmlEnumAttribute("120205001")]
        Item120205001,

        [XmlEnumAttribute("110203004")]
        Item110203004,

        [XmlEnumAttribute("120203001")]
        Item120203001,

        [XmlEnumAttribute("530102001")]
        Item530102001,

        [XmlEnumAttribute("530101002")]
        Item530101002,

        [XmlEnumAttribute("110108001")]
        Item110108001,

        [XmlEnumAttribute("110105017")]
        Item110105017,

        [XmlEnumAttribute("110206019")]
        Item110206019,

        [XmlEnumAttribute("110205023")]
        Item110205023,

        [XmlEnumAttribute("110203092")]
        Item110203092,

        [XmlEnumAttribute("110201002")]
        Item110201002,

        [XmlEnumAttribute("120202001")]
        Item120202001,

        [XmlEnumAttribute("110101003")]
        Item110101003,

        [XmlEnumAttribute("110101004")]
        Item110101004,

        [XmlEnumAttribute("110103004")]
        Item110103004,

        [XmlEnumAttribute("110103005")]
        Item110103005,

        [XmlEnumAttribute("110101005")]
        Item110101005,

        [XmlEnumAttribute("110204012")]
        Item110204012,

        [XmlEnumAttribute("110204013")]
        Item110204013,

        [XmlEnumAttribute("110204014")]
        Item110204014,

        [XmlEnumAttribute("110102001")]
        Item110102001,

        [XmlEnumAttribute("120207003")]
        Item120207003,

        [XmlEnumAttribute("110201003")]
        Item110201003,

        [XmlEnumAttribute("110201004")]
        Item110201004,

        [XmlEnumAttribute("110201005")]
        Item110201005,

        [XmlEnumAttribute("110201006")]
        Item110201006,

        [XmlEnumAttribute("110206001")]
        Item110206001,

        [XmlEnumAttribute("110205002")]
        Item110205002,

        [XmlEnumAttribute("110203005")]
        Item110203005,

        [XmlEnumAttribute("110205003")]
        Item110205003,

        [XmlEnumAttribute("330201001")]
        Item330201001,

        [XmlEnumAttribute("110206002")]
        Item110206002,

        [XmlEnumAttribute("110101006")]
        Item110101006,

        [XmlEnumAttribute("110101007")]
        Item110101007,

        [XmlEnumAttribute("110101038")]
        Item110101038,

        [XmlEnumAttribute("120205002")]
        Item120205002,

        [XmlEnumAttribute("820101001")]
        Item820101001,

        [XmlEnumAttribute("820101010")]
        Item820101010,

        [XmlEnumAttribute("820101999")]
        Item820101999,

        [XmlEnumAttribute("110206003")]
        Item110206003,

        [XmlEnumAttribute("110201007")]
        Item110201007,

        [XmlEnumAttribute("120201001")]
        Item120201001,

        [XmlEnumAttribute("110201008")]
        Item110201008,

        [XmlEnumAttribute("110103017")]
        Item110103017,

        [XmlEnumAttribute("110205004")]
        Item110205004,

        [XmlEnumAttribute("110203077")]
        Item110203077,

        [XmlEnumAttribute("110101008")]
        Item110101008,

        [XmlEnumAttribute("110203006")]
        Item110203006,

        [XmlEnumAttribute("110203007")]
        Item110203007,

        [XmlEnumAttribute("110201009")]
        Item110201009,

        [XmlEnumAttribute("110203008")]
        Item110203008,

        [XmlEnumAttribute("110203009")]
        Item110203009,

        [XmlEnumAttribute("110203010")]
        Item110203010,

        [XmlEnumAttribute("120203004")]
        Item120203004,

        [XmlEnumAttribute("110206004")]
        Item110206004,

        [XmlEnumAttribute("610101009")]
        Item610101009,

        [XmlEnumAttribute("120205003")]
        Item120205003,

        [XmlEnumAttribute("110205005")]
        Item110205005,

        [XmlEnumAttribute("110203092")]
        Item1102030921,

        [XmlEnumAttribute("110204015")]
        Item110204015,

        [XmlEnumAttribute("210202003")]
        Item210202003,

        [XmlEnumAttribute("210202001")]
        Item210202001,

        [XmlEnumAttribute("210202002")]
        Item210202002,

        [XmlEnumAttribute("110105018")]
        Item110105018,

        [XmlEnumAttribute("110203011")]
        Item110203011,

        [XmlEnumAttribute("110203012")]
        Item110203012,

        [XmlEnumAttribute("110101009")]
        Item110101009,

        [XmlEnumAttribute("110104001")]
        Item110104001,

        [XmlEnumAttribute("110104006")]
        Item110104006,

        [XmlEnumAttribute("110106010")]
        Item110106010,

        [XmlEnumAttribute("110202007")]
        Item110202007,

        [XmlEnumAttribute("110106002")]
        Item110106002,

        [XmlEnumAttribute("110111002")]
        Item110111002,

        [XmlEnumAttribute("110103006")]
        Item110103006,

        [XmlEnumAttribute("110105003")]
        Item110105003,

        [XmlEnumAttribute("110201010")]
        Item110201010,

        [XmlEnumAttribute("110201011")]
        Item110201011,

        [XmlEnumAttribute("110201012")]
        Item110201012,

        [XmlEnumAttribute("110101010")]
        Item110101010,

        [XmlEnumAttribute("110101011")]
        Item110101011,

        [XmlEnumAttribute("110108002")]
        Item110108002,

        [XmlEnumAttribute("110107001")]
        Item110107001,

        [XmlEnumAttribute("120202002")]
        Item120202002,

        [XmlEnumAttribute("110106003")]
        Item110106003,

        [XmlEnumAttribute("110108003")]
        Item110108003,

        [XmlEnumAttribute("110203085")]
        Item110203085,

        [XmlEnumAttribute("110201013")]
        Item110201013,

        [XmlEnumAttribute("110207001")]
        Item110207001,

        [XmlEnumAttribute("110105023")]
        Item110105023,

        [XmlEnumAttribute("110101012")]
        Item110101012,

        [XmlEnumAttribute("110201014")]
        Item110201014,

        [XmlEnumAttribute("620501002")]
        Item620501002,

        [XmlEnumAttribute("620501001")]
        Item620501001,

        [XmlEnumAttribute("610101005")]
        Item610101005,

        [XmlEnumAttribute("610101006")]
        Item610101006,

        [XmlEnumAttribute("530101001")]
        Item530101001,

        [XmlEnumAttribute("530101020")]
        Item530101020,

        [XmlEnumAttribute("530101018")]
        Item530101018,

        [XmlEnumAttribute("110205006")]
        Item110205006,

        [XmlEnumAttribute("110201015")]
        Item110201015,

        [XmlEnumAttribute("110203013")]
        Item110203013,

        [XmlEnumAttribute("110202001")]
        Item110202001,

        [XmlEnumAttribute("120104001")]
        Item120104001,

        [XmlEnumAttribute("120102001")]
        Item120102001,

        [XmlEnumAttribute("110205024")]
        Item110205024,

        [XmlEnumAttribute("120205009")]
        Item120205009,

        [XmlEnumAttribute("540101002")]
        Item540101002,

        [XmlEnumAttribute("540101001")]
        Item540101001,

        [XmlEnumAttribute("110107002")]
        Item110107002,

        [XmlEnumAttribute("620601003")]
        Item620601003,

        [XmlEnumAttribute("110201016")]
        Item110201016,

        [XmlEnumAttribute("110101013")]
        Item110101013,

        [XmlEnumAttribute("120207001")]
        Item120207001,

        [XmlEnumAttribute("110206020")]
        Item110206020,

        [XmlEnumAttribute("110104008")]
        Item110104008,

        [XmlEnumAttribute("110201017")]
        Item110201017,

        [XmlEnumAttribute("110108004")]
        Item110108004,

        [XmlEnumAttribute("110201018")]
        Item110201018,

        [XmlEnumAttribute("330201007")]
        Item330201007,

        [XmlEnumAttribute("110205007")]
        Item110205007,

        [XmlEnumAttribute("110203086")]
        Item110203086,

        [XmlEnumAttribute("110205008")]
        Item110205008,

        [XmlEnumAttribute("340101002")]
        Item340101002,

        [XmlEnumAttribute("130202002")]
        Item130202002,

        [XmlEnumAttribute("430101002")]
        Item430101002,

        [XmlEnumAttribute("130202003")]
        Item130202003,

        [XmlEnumAttribute("560101002")]
        Item560101002,

        [XmlEnumAttribute("130202004")]
        Item130202004,

        [XmlEnumAttribute("820101026")]
        Item820101026,

        [XmlEnumAttribute("820101032")]
        Item820101032,

        [XmlEnumAttribute("820101027")]
        Item820101027,

        [XmlEnumAttribute("820101004")]
        Item820101004,

        [XmlEnumAttribute("820101005")]
        Item820101005,

        [XmlEnumAttribute("820101022")]
        Item820101022,

        [XmlEnumAttribute("820101007")]
        Item820101007,

        [XmlEnumAttribute("820101002")]
        Item820101002,

        [XmlEnumAttribute("820101009")]
        Item820101009,

        [XmlEnumAttribute("820101008")]
        Item820101008,

        [XmlEnumAttribute("820101014")]
        Item820101014,

        [XmlEnumAttribute("820101006")]
        Item820101006,

        [XmlEnumAttribute("820101016")]
        Item820101016,

        [XmlEnumAttribute("820101015")]
        Item820101015,

        [XmlEnumAttribute("820101014")]
        Item8201010141,

        [XmlEnumAttribute("820101006")]
        Item8201010061,

        [XmlEnumAttribute("820101031")]
        Item820101031,

        [XmlEnumAttribute("820101030")]
        Item820101030,

        [XmlEnumAttribute("820101016")]
        Item8201010161,

        [XmlEnumAttribute("820101015")]
        Item8201010151,

        [XmlEnumAttribute("820101025")]
        Item820101025,

        [XmlEnumAttribute("820101007")]
        Item8201010071,

        [XmlEnumAttribute("820101002")]
        Item8201010021,

        [XmlEnumAttribute("820101026")]
        Item8201010261,

        [XmlEnumAttribute("820101009")]
        Item8201010091,

        [XmlEnumAttribute("820101008")]
        Item8201010081,

        [XmlEnumAttribute("820101027")]
        Item8201010271,

        [XmlEnumAttribute("820101007")]
        Item8201010072,

        [XmlEnumAttribute("820101002")]
        Item8201010022,

        [XmlEnumAttribute("820101028")]
        Item820101028,

        [XmlEnumAttribute("820101029")]
        Item820101029,

        [XmlEnumAttribute("820101009")]
        Item8201010092,

        [XmlEnumAttribute("820101008")]
        Item8201010082,

        [XmlEnumAttribute("820101011")]
        Item820101011,

        [XmlEnumAttribute("820101003")]
        Item820101003,

        [XmlEnumAttribute("820101013")]
        Item820101013,

        [XmlEnumAttribute("820101012")]
        Item820101012,

        [XmlEnumAttribute("820101017")]
        Item820101017,

        [XmlEnumAttribute("820101018")]
        Item820101018,

        [XmlEnumAttribute("820101019")]
        Item820101019,

        [XmlEnumAttribute("820101020")]
        Item820101020,

        [XmlEnumAttribute("820101021")]
        Item820101021,

        [XmlEnumAttribute("330101003")]
        Item330101003,

        [XmlEnumAttribute("130202006")]
        Item130202006,

        [XmlEnumAttribute("110203014")]
        Item110203014,

        [XmlEnumAttribute("420201001")]
        Item420201001,

        [XmlEnumAttribute("420201003")]
        Item420201003,

        [XmlEnumAttribute("120204010")]
        Item120204010,

        [XmlEnumAttribute("110103007")]
        Item110103007,

        [XmlEnumAttribute("110204017")]
        Item110204017,

        [XmlEnumAttribute("110204051")]
        Item110204051,

        [XmlEnumAttribute("110204018")]
        Item110204018,

        [XmlEnumAttribute("110205022")]
        Item110205022,

        [XmlEnumAttribute("110203069")]
        Item110203069,

        [XmlEnumAttribute("110203015")]
        Item110203015,

        [XmlEnumAttribute("110206005")]
        Item110206005,

        [XmlEnumAttribute("110203016")]
        Item110203016,

        [XmlEnumAttribute("110203017")]
        Item110203017,

        [XmlEnumAttribute("110203018")]
        Item110203018,

        [XmlEnumAttribute("110203088")]
        Item110203088,

        [XmlEnumAttribute("110203019")]
        Item110203019,

        [XmlEnumAttribute("530101003")]
        Item530101003,

        [XmlEnumAttribute("530101019")]
        Item530101019,

        [XmlEnumAttribute("110101014")]
        Item110101014,

        [XmlEnumAttribute("620101002")]
        Item620101002,

        [XmlEnumAttribute("720101001")]
        Item720101001,

        [XmlEnumAttribute("720101002")]
        Item720101002,

        [XmlEnumAttribute("120205004")]
        Item120205004,

        [XmlEnumAttribute("110203079")]
        Item110203079,

        [XmlEnumAttribute("110203020")]
        Item110203020,

        [XmlEnumAttribute("110201019")]
        Item110201019,

        [XmlEnumAttribute("110203021")]
        Item110203021,

        [XmlEnumAttribute("110108005")]
        Item110108005,

        [XmlEnumAttribute("110101015")]
        Item110101015,

        [XmlEnumAttribute("110104002")]
        Item110104002,

        [XmlEnumAttribute("110101016")]
        Item110101016,

        [XmlEnumAttribute("620101007")]
        Item620101007,

        [XmlEnumAttribute("140102001")]
        Item140102001,

        [XmlEnumAttribute("110105004")]
        Item110105004,

        [XmlEnumAttribute("110107003")]
        Item110107003,

        [XmlEnumAttribute("110203095")]
        Item110203095,

        [XmlEnumAttribute("210301001")]
        Item210301001,

        [XmlEnumAttribute("810102001")]
        Item810102001,

        [XmlEnumAttribute("810102004")]
        Item810102004,

        [XmlEnumAttribute("810102002")]
        Item810102002,

        [XmlEnumAttribute("130201002")]
        Item130201002,

        [XmlEnumAttribute("810102003")]
        Item810102003,

        [XmlEnumAttribute("810101002")]
        Item810101002,

        [XmlEnumAttribute("810101001")]
        Item810101001,

        [XmlEnumAttribute("810101003")]
        Item810101003,

        [XmlEnumAttribute("210301002")]
        Item210301002,

        [XmlEnumAttribute("330201010")]
        Item330201010,

        [XmlEnumAttribute("110204016")]
        Item110204016,

        [XmlEnumAttribute("110105005")]
        Item110105005,

        [XmlEnumAttribute("110105006")]
        Item110105006,

        [XmlEnumAttribute("110105007")]
        Item110105007,

        [XmlEnumAttribute("110104003")]
        Item110104003,

        [XmlEnumAttribute("110206006")]
        Item110206006,

        [XmlEnumAttribute("110206007")]
        Item110206007,

        [XmlEnumAttribute("110203022")]
        Item110203022,

        [XmlEnumAttribute("110204019")]
        Item110204019,

        [XmlEnumAttribute("110206008")]
        Item110206008,

        [XmlEnumAttribute("110206009")]
        Item110206009,

        [XmlEnumAttribute("110101043")]
        Item110101043,

        [XmlEnumAttribute("110201020")]
        Item110201020,

        [XmlEnumAttribute("110203023")]
        Item110203023,

        [XmlEnumAttribute("110101017")]
        Item110101017,

        [XmlEnumAttribute("110101018")]
        Item110101018,

        [XmlEnumAttribute("210302004")]
        Item210302004,

        [XmlEnumAttribute("210101001")]
        Item210101001,

        [XmlEnumAttribute("210302003")]
        Item210302003,

        [XmlEnumAttribute("210302002")]
        Item210302002,

        [XmlEnumAttribute("210204001")]
        Item210204001,

        [XmlEnumAttribute("220101003")]
        Item220101003,

        [XmlEnumAttribute("220101004")]
        Item220101004,

        [XmlEnumAttribute("220101002")]
        Item220101002,

        [XmlEnumAttribute("220101001")]
        Item220101001,

        [XmlEnumAttribute("220101005")]
        Item220101005,

        [XmlEnumAttribute("220101006")]
        Item220101006,

        [XmlEnumAttribute("130202001")]
        Item130202001,

        [XmlEnumAttribute("130202005")]
        Item130202005,

        [XmlEnumAttribute("520101001")]
        Item520101001,

        [XmlEnumAttribute("320101001")]
        Item320101001,

        [XmlEnumAttribute("320101003")]
        Item320101003,

        [XmlEnumAttribute("320101002")]
        Item320101002,

        [XmlEnumAttribute("320103001")]
        Item320103001,

        [XmlEnumAttribute("320102002")]
        Item320102002,

        [XmlEnumAttribute("320102001")]
        Item320102001,

        [XmlEnumAttribute("320102004")]
        Item320102004,

        [XmlEnumAttribute("320102003")]
        Item320102003,

        [XmlEnumAttribute("320201001")]
        Item320201001,

        [XmlEnumAttribute("320201002")]
        Item320201002,

        [XmlEnumAttribute("220102001")]
        Item220102001,

        [XmlEnumAttribute("320301002")]
        Item320301002,

        [XmlEnumAttribute("110204020")]
        Item110204020,

        [XmlEnumAttribute("110203024")]
        Item110203024,

        [XmlEnumAttribute("120205012")]
        Item120205012,

        [XmlEnumAttribute("110207002")]
        Item110207002,

        [XmlEnumAttribute("110203087")]
        Item110203087,

        [XmlEnumAttribute("730101002")]
        Item730101002,

        [XmlEnumAttribute("210203001")]
        Item210203001,

        [XmlEnumAttribute("210203002")]
        Item210203002,

        [XmlEnumAttribute("110104005")]
        Item110104005,

        [XmlEnumAttribute("140101023")]
        Item140101023,

        [XmlEnumAttribute("140101024")]
        Item140101024,

        [XmlEnumAttribute("140101025")]
        Item140101025,

        [XmlEnumAttribute("650101001")]
        Item650101001,

        [XmlEnumAttribute("110207003")]
        Item110207003,

        [XmlEnumAttribute("110201021")]
        Item110201021,

        [XmlEnumAttribute("110103013")]
        Item110103013,

        [XmlEnumAttribute("110201022")]
        Item110201022,

        [XmlEnumAttribute("110203025")]
        Item110203025,

        [XmlEnumAttribute("110203026")]
        Item110203026,

        [XmlEnumAttribute("110206011")]
        Item110206011,

        [XmlEnumAttribute("110206010")]
        Item110206010,

        [XmlEnumAttribute("110203027")]
        Item110203027,

        [XmlEnumAttribute("110203028")]
        Item110203028,

        [XmlEnumAttribute("110203028")]
        Item1102030281,

        [XmlEnumAttribute("330101008")]
        Item330101008,

        [XmlEnumAttribute("330101002")]
        Item330101002,

        [XmlEnumAttribute("330101009")]
        Item330101009,

        [XmlEnumAttribute("620101001")]
        Item620101001,

        [XmlEnumAttribute("610201001")]
        Item610201001,

        [XmlEnumAttribute("610201002")]
        Item610201002,

        [XmlEnumAttribute("610201003")]
        Item610201003,

        [XmlEnumAttribute("710101001")]
        Item710101001,

        [XmlEnumAttribute("110203074")]
        Item110203074,

        [XmlEnumAttribute("110201023")]
        Item110201023,

        [XmlEnumAttribute("110103008")]
        Item110103008,

        [XmlEnumAttribute("110203029")]
        Item110203029,

        [XmlEnumAttribute("120205005")]
        Item120205005,

        [XmlEnumAttribute("110204021")]
        Item110204021,

        [XmlEnumAttribute("110204022")]
        Item110204022,

        [XmlEnumAttribute("110204023")]
        Item110204023,

        [XmlEnumAttribute("620101004")]
        Item620101004,

        [XmlEnumAttribute("620101005")]
        Item620101005,

        [XmlEnumAttribute("330101010")]
        Item330101010,

        [XmlEnumAttribute("110202002")]
        Item110202002,

        [XmlEnumAttribute("110202003")]
        Item110202003,

        [XmlEnumAttribute("110207004")]
        Item110207004,

        [XmlEnumAttribute("110101046")]
        Item110101046,

        [XmlEnumAttribute("110204024")]
        Item110204024,

        [XmlEnumAttribute("110113001")]
        Item110113001,

        [XmlEnumAttribute("110105015")]
        Item110105015,

        [XmlEnumAttribute("110101019")]
        Item110101019,

        [XmlEnumAttribute("110103015")]
        Item110103015,

        [XmlEnumAttribute("110205025")]
        Item110205025,

        [XmlEnumAttribute("110204025")]
        Item110204025,

        [XmlEnumAttribute("110204026")]
        Item110204026,

        [XmlEnumAttribute("110204027")]
        Item110204027,

        [XmlEnumAttribute("120204009")]
        Item120204009,

        [XmlEnumAttribute("110205026")]
        Item110205026,

        [XmlEnumAttribute("110204028")]
        Item110204028,

        [XmlEnumAttribute("110204029")]
        Item110204029,

        [XmlEnumAttribute("110203080")]
        Item110203080,

        [XmlEnumAttribute("120207004")]
        Item120207004,

        [XmlEnumAttribute("110203030")]
        Item110203030,

        [XmlEnumAttribute("110105025")]
        Item110105025,

        [XmlEnumAttribute("110203031")]
        Item110203031,

        [XmlEnumAttribute("110203084")]
        Item110203084,

        [XmlEnumAttribute("110203032")]
        Item110203032,

        [XmlEnumAttribute("110204030")]
        Item110204030,

        [XmlEnumAttribute("110205009")]
        Item110205009,

        [XmlEnumAttribute("110104004")]
        Item110104004,

        [XmlEnumAttribute("110201024")]
        Item110201024,

        [XmlEnumAttribute("110201025")]
        Item110201025,

        [XmlEnumAttribute("110201026")]
        Item110201026,

        [XmlEnumAttribute("110201027")]
        Item110201027,

        [XmlEnumAttribute("110201028")]
        Item110201028,

        [XmlEnumAttribute("110201029")]
        Item110201029,

        [XmlEnumAttribute("110201030")]
        Item110201030,

        [XmlEnumAttribute("110207005")]
        Item110207005,

        [XmlEnumAttribute("110204031")]
        Item110204031,

        [XmlEnumAttribute("110207006")]
        Item110207006,

        [XmlEnumAttribute("110201031")]
        Item110201031,

        [XmlEnumAttribute("110201032")]
        Item110201032,

        [XmlEnumAttribute("110201033")]
        Item110201033,

        [XmlEnumAttribute("120204002")]
        Item120204002,

        [XmlEnumAttribute("110101020")]
        Item110101020,

        [XmlEnumAttribute("220102002")]
        Item220102002,

        [XmlEnumAttribute("110105008")]
        Item110105008,

        [XmlEnumAttribute("110203033")]
        Item110203033,

        [XmlEnumAttribute("110105009")]
        Item110105009,

        [XmlEnumAttribute("110201034")]
        Item110201034,

        [XmlEnumAttribute("110203034")]
        Item110203034,

        [XmlEnumAttribute("110203035")]
        Item110203035,

        [XmlEnumAttribute("640201001")]
        Item640201001,

        [XmlEnumAttribute("120205011")]
        Item120205011,

        [XmlEnumAttribute("110101021")]
        Item110101021,

        [XmlEnumAttribute("120103001")]
        Item120103001,

        [XmlEnumAttribute("110203036")]
        Item110203036,

        [XmlEnumAttribute("120204003")]
        Item120204003,

        [XmlEnumAttribute("110201035")]
        Item110201035,

        [XmlEnumAttribute("110204032")]
        Item110204032,

        [XmlEnumAttribute("110101022")]
        Item110101022,

        [XmlEnumAttribute("110201036")]
        Item110201036,

        [XmlEnumAttribute("110101023")]
        Item110101023,

        [XmlEnumAttribute("110101024")]
        Item110101024,

        [XmlEnumAttribute("110101025")]
        Item110101025,

        [XmlEnumAttribute("110101039")]
        Item110101039,

        [XmlEnumAttribute("110204033")]
        Item110204033,

        [XmlEnumAttribute("120207002")]
        Item120207002,

        [XmlEnumAttribute("110202004")]
        Item110202004,

        [XmlEnumAttribute("110202005")]
        Item110202005,

        [XmlEnumAttribute("110203037")]
        Item110203037,

        [XmlEnumAttribute("110203037")]
        Item1102030371,

        [XmlEnumAttribute("110201037")]
        Item110201037,

        [XmlEnumAttribute("110203078")]
        Item110203078,

        [XmlEnumAttribute("120203005")]
        Item120203005,

        [XmlEnumAttribute("120204010")]
        Item1202040101,

        [XmlEnumAttribute("110201038")]
        Item110201038,

        [XmlEnumAttribute("110201039")]
        Item110201039,

        [XmlEnumAttribute("120101001")]
        Item120101001,

        [XmlEnumAttribute("110201040")]
        Item110201040,

        [XmlEnumAttribute("110201041")]
        Item110201041,

        [XmlEnumAttribute("740101007")]
        Item740101007,

        [XmlEnumAttribute("420201003")]
        Item4202010031,

        [XmlEnumAttribute("640101001")]
        Item640101001,

        [XmlEnumAttribute("110205027")]
        Item110205027,

        [XmlEnumAttribute("110103009")]
        Item110103009,

        [XmlEnumAttribute("110103010")]
        Item110103010,

        [XmlEnumAttribute("110205010")]
        Item110205010,

        [XmlEnumAttribute("820101018")]
        Item8201010181,

        [XmlEnumAttribute("820101017")]
        Item8201010171,

        [XmlEnumAttribute("820101006")]
        Item8201010062,

        [XmlEnumAttribute("820101014")]
        Item8201010142,

        [XmlEnumAttribute("820101006")]
        Item8201010063,

        [XmlEnumAttribute("820101016")]
        Item8201010162,

        [XmlEnumAttribute("820101015")]
        Item8201010152,

        [XmlEnumAttribute("820101006")]
        Item8201010064,

        [XmlEnumAttribute("820101005")]
        Item8201010051,

        [XmlEnumAttribute("820101004")]
        Item8201010041,

        [XmlEnumAttribute("820101003")]
        Item8201010031,

        [XmlEnumAttribute("820101011")]
        Item8201010111,

        [XmlEnumAttribute("820101003")]
        Item8201010032,

        [XmlEnumAttribute("820101013")]
        Item8201010131,

        [XmlEnumAttribute("820101012")]
        Item8201010121,

        [XmlEnumAttribute("820101002")]
        Item8201010023,

        [XmlEnumAttribute("820101007")]
        Item8201010073,

        [XmlEnumAttribute("820101002")]
        Item8201010024,

        [XmlEnumAttribute("820101009")]
        Item8201010093,

        [XmlEnumAttribute("820101008")]
        Item8201010083,

        [XmlEnumAttribute("110301001")]
        Item110301001,

        [XmlEnumAttribute("110208001")]
        Item110208001,

        [XmlEnumAttribute("110203038")]
        Item110203038,

        [XmlEnumAttribute("110203089")]
        Item110203089,

        [XmlEnumAttribute("110201042")]
        Item110201042,

        [XmlEnumAttribute("110101026")]
        Item110101026,

        [XmlEnumAttribute("620502001")]
        Item620502001,

        [XmlEnumAttribute("110203039")]
        Item110203039,

        [XmlEnumAttribute("110202008")]
        Item110202008,

        [XmlEnumAttribute("110204034")]
        Item110204034,

        [XmlEnumAttribute("110110001")]
        Item110110001,

        [XmlEnumAttribute("310102001")]
        Item310102001,

        [XmlEnumAttribute("310103001")]
        Item310103001,

        [XmlEnumAttribute("310101001")]
        Item310101001,

        [XmlEnumAttribute("110101027")]
        Item110101027,

        [XmlEnumAttribute("110205011")]
        Item110205011,

        [XmlEnumAttribute("110201062")]
        Item110201062,

        [XmlEnumAttribute("110203040")]
        Item110203040,

        [XmlEnumAttribute("610101002")]
        Item610101002,

        [XmlEnumAttribute("610401002")]
        Item610401002,

        [XmlEnumAttribute("610101003")]
        Item610101003,

        [XmlEnumAttribute("610401003")]
        Item610401003,

        [XmlEnumAttribute("610101004")]
        Item610101004,

        [XmlEnumAttribute("610401004")]
        Item610401004,

        [XmlEnumAttribute("110203041")]
        Item110203041,

        [XmlEnumAttribute("110203042")]
        Item110203042,

        [XmlEnumAttribute("110203043")]
        Item110203043,

        [XmlEnumAttribute("110203094")]
        Item110203094,

        [XmlEnumAttribute("110203044")]
        Item110203044,

        [XmlEnumAttribute("110203044")]
        Item1102030441,

        [XmlEnumAttribute("430101001")]
        Item430101001,

        [XmlEnumAttribute("110206021")]
        Item110206021,

        [XmlEnumAttribute("120204004")]
        Item120204004,

        [XmlEnumAttribute("110207007")]
        Item110207007,

        [XmlEnumAttribute("110203045")]
        Item110203045,

        [XmlEnumAttribute("110201043")]
        Item110201043,

        [XmlEnumAttribute("110203046")]
        Item110203046,

        [XmlEnumAttribute("110203047")]
        Item110203047,

        [XmlEnumAttribute("110203048")]
        Item110203048,

        [XmlEnumAttribute("110203081")]
        Item110203081,

        [XmlEnumAttribute("430101004")]
        Item430101004,

        [XmlEnumAttribute("510101003")]
        Item510101003,

        [XmlEnumAttribute("510101001")]
        Item510101001,

        [XmlEnumAttribute("510101002")]
        Item510101002,

        [XmlEnumAttribute("510102003")]
        Item510102003,

        [XmlEnumAttribute("510102001")]
        Item510102001,

        [XmlEnumAttribute("510102002")]
        Item510102002,

        [XmlEnumAttribute("510201001")]
        Item510201001,

        [XmlEnumAttribute("510201002")]
        Item510201002,

        [XmlEnumAttribute("510201003")]
        Item510201003,

        [XmlEnumAttribute("510301003")]
        Item510301003,

        [XmlEnumAttribute("140101015")]
        Item140101015,

        [XmlEnumAttribute("140101009")]
        Item140101009,

        [XmlEnumAttribute("140101016")]
        Item140101016,

        [XmlEnumAttribute("140101017")]
        Item140101017,

        [XmlEnumAttribute("140101005")]
        Item140101005,

        [XmlEnumAttribute("140101014")]
        Item140101014,

        [XmlEnumAttribute("140101018")]
        Item140101018,

        [XmlEnumAttribute("140101006")]
        Item140101006,

        [XmlEnumAttribute("140101028")]
        Item140101028,

        [XmlEnumAttribute("140101021")]
        Item140101021,

        [XmlEnumAttribute("140101010")]
        Item140101010,

        [XmlEnumAttribute("140101012")]
        Item140101012,

        [XmlEnumAttribute("140101013")]
        Item140101013,

        [XmlEnumAttribute("140101001")]
        Item140101001,

        [XmlEnumAttribute("140101011")]
        Item140101011,

        [XmlEnumAttribute("140101003")]
        Item140101003,

        [XmlEnumAttribute("140101002")]
        Item140101002,

        [XmlEnumAttribute("140101008")]
        Item140101008,

        [XmlEnumAttribute("140101007")]
        Item140101007,

        [XmlEnumAttribute("140101019")]
        Item140101019,

        [XmlEnumAttribute("140101004")]
        Item140101004,

        [XmlEnumAttribute("560101001")]
        Item560101001,

        [XmlEnumAttribute("420105001")]
        Item420105001,

        [XmlEnumAttribute("420101005")]
        Item420101005,

        [XmlEnumAttribute("420101004")]
        Item420101004,

        [XmlEnumAttribute("420101003")]
        Item420101003,

        [XmlEnumAttribute("420102006")]
        Item420102006,

        [XmlEnumAttribute("420102005")]
        Item420102005,

        [XmlEnumAttribute("420102004")]
        Item420102004,

        [XmlEnumAttribute("420102003")]
        Item420102003,

        [XmlEnumAttribute("420104001")]
        Item420104001,

        [XmlEnumAttribute("820101033")]
        Item820101033,

        [XmlEnumAttribute("820101034")]
        Item820101034,

        [XmlEnumAttribute("820101011")]
        Item8201010112,

        [XmlEnumAttribute("820101003")]
        Item8201010033,

        [XmlEnumAttribute("820101028")]
        Item8201010281,

        [XmlEnumAttribute("820101029")]
        Item8201010291,

        [XmlEnumAttribute("820101013")]
        Item8201010132,

        [XmlEnumAttribute("820101012")]
        Item8201010122,

        [XmlEnumAttribute("420301003")]
        Item420301003,

        [XmlEnumAttribute("420101005")]
        Item4201010051,

        [XmlEnumAttribute("420101002")]
        Item420101002,

        [XmlEnumAttribute("420101001")]
        Item420101001,

        [XmlEnumAttribute("420101003")]
        Item4201010031,

        [XmlEnumAttribute("420101004")]
        Item4201010041,

        [XmlEnumAttribute("420101003")]
        Item4201010032,

        [XmlEnumAttribute("420201001")]
        Item4202010011,

        [XmlEnumAttribute("420201002")]
        Item420201002,

        [XmlEnumAttribute("420102005")]
        Item4201020051,

        [XmlEnumAttribute("420102004")]
        Item4201020041,

        [XmlEnumAttribute("420102002")]
        Item420102002,

        [XmlEnumAttribute("420102001")]
        Item420102001,

        [XmlEnumAttribute("420102003")]
        Item4201020031,

        [XmlEnumAttribute("420102003")]
        Item4201020032,

        [XmlEnumAttribute("420202001")]
        Item420202001,

        [XmlEnumAttribute("420301001")]
        Item420301001,

        [XmlEnumAttribute("420102006")]
        Item4201020061,

        [XmlEnumAttribute("420103002")]
        Item420103002,

        [XmlEnumAttribute("420103001")]
        Item420103001,

        [XmlEnumAttribute("420103003")]
        Item420103003,

        [XmlEnumAttribute("610601001")]
        Item610601001,

        [XmlEnumAttribute("610701001")]
        Item610701001,

        [XmlEnumAttribute("510301002")]
        Item510301002,

        [XmlEnumAttribute("620601001")]
        Item620601001,

        [XmlEnumAttribute("660101001")]
        Item660101001,

        [XmlEnumAttribute("620401001")]
        Item620401001,

        [XmlEnumAttribute("620301001")]
        Item620301001,

        [XmlEnumAttribute("620201001")]
        Item620201001,

        [XmlEnumAttribute("630101001")]
        Item630101001,

        [XmlEnumAttribute("110202006")]
        Item110202006,

        [XmlEnumAttribute("110203093")]
        Item110203093,

        [XmlEnumAttribute("110204035")]
        Item110204035,

        [XmlEnumAttribute("110203049")]
        Item110203049,

        [XmlEnumAttribute("110201044")]
        Item110201044,

        [XmlEnumAttribute("110201045")]
        Item110201045,

        [XmlEnumAttribute("110206012")]
        Item110206012,

        [XmlEnumAttribute("120203003")]
        Item120203003,

        [XmlEnumAttribute("320301001")]
        Item320301001,

        [XmlEnumAttribute("320103002")]
        Item320103002,

        [XmlEnumAttribute("650101002")]
        Item650101002,

        [XmlEnumAttribute("310102002")]
        Item310102002,

        [XmlEnumAttribute("640401001")]
        Item640401001,

        [XmlEnumAttribute("140101029")]
        Item140101029,

        [XmlEnumAttribute("740101003")]
        Item740101003,

        [XmlEnumAttribute("810201002")]
        Item810201002,

        [XmlEnumAttribute("530103001")]
        Item530103001,

        [XmlEnumAttribute("340101003")]
        Item340101003,

        [XmlEnumAttribute("430101003")]
        Item430101003,

        [XmlEnumAttribute("560101003")]
        Item560101003,

        [XmlEnumAttribute("210302001")]
        Item210302001,

        [XmlEnumAttribute("210204002")]
        Item210204002,

        [XmlEnumAttribute("130201001")]
        Item130201001,

        [XmlEnumAttribute("530104001")]
        Item530104001,

        [XmlEnumAttribute("140101022")]
        Item140101022,

        [XmlEnumAttribute("140101999")]
        Item140101999,

        [XmlEnumAttribute("610201004")]
        Item610201004,

        [XmlEnumAttribute("510301001")]
        Item510301001,

        [XmlEnumAttribute("420301002")]
        Item420301002,

        [XmlEnumAttribute("620601004")]
        Item620601004,

        [XmlEnumAttribute("620505001")]
        Item620505001,

        [XmlEnumAttribute("610501001")]
        Item610501001,

        [XmlEnumAttribute("620101008")]
        Item620101008,

        [XmlEnumAttribute("610101010")]
        Item610101010,

        [XmlEnumAttribute("110208002")]
        Item110208002,

        [XmlEnumAttribute("110110002")]
        Item110110002,

        [XmlEnumAttribute("130202008")]
        Item130202008,

        [XmlEnumAttribute("410103001")]
        Item410103001,

        [XmlEnumAttribute("610301002")]
        Item610301002,

        [XmlEnumAttribute("610302001")]
        Item610302001,

        [XmlEnumAttribute("330101007")]
        Item330101007,

        [XmlEnumAttribute("330201009")]
        Item330201009,

        [XmlEnumAttribute("730101001")]
        Item730101001,

        [XmlEnumAttribute("110203050")]
        Item110203050,

        [XmlEnumAttribute("110101028")]
        Item110101028,

        [XmlEnumAttribute("110101049")]
        Item110101049,

        [XmlEnumAttribute("110101029")]
        Item110101029,

        [XmlEnumAttribute("110101030")]
        Item110101030,

        [XmlEnumAttribute("110104007")]
        Item110104007,

        [XmlEnumAttribute("110111001")]
        Item110111001,

        [XmlEnumAttribute("120205006")]
        Item120205006,

        [XmlEnumAttribute("110203051")]
        Item110203051,

        [XmlEnumAttribute("110101050")]
        Item110101050,

        [XmlEnumAttribute("110105028")]
        Item110105028,

        [XmlEnumAttribute("110105016")]
        Item110105016,

        [XmlEnumAttribute("110201046")]
        Item110201046,

        [XmlEnumAttribute("110106007")]
        Item110106007,

        [XmlEnumAttribute("110101031")]
        Item110101031,

        [XmlEnumAttribute("110203082")]
        Item110203082,

        [XmlEnumAttribute("610301001")]
        Item610301001,

        [XmlEnumAttribute("110101032")]
        Item110101032,

        [XmlEnumAttribute("110101047")]
        Item110101047,

        [XmlEnumAttribute("110105021")]
        Item110105021,

        [XmlEnumAttribute("110105010")]
        Item110105010,

        [XmlEnumAttribute("620101003")]
        Item620101003,

        [XmlEnumAttribute("210201001")]
        Item210201001,

        [XmlEnumAttribute("210201002")]
        Item210201002,

        [XmlEnumAttribute("210201003")]
        Item210201003,

        [XmlEnumAttribute("110105020")]
        Item110105020,

        [XmlEnumAttribute("110105022")]
        Item110105022,

        [XmlEnumAttribute("110205012")]
        Item110205012,

        [XmlEnumAttribute("620601002")]
        Item620601002,

        [XmlEnumAttribute("120206003")]
        Item120206003,

        [XmlEnumAttribute("110204036")]
        Item110204036,

        [XmlEnumAttribute("110204037")]
        Item110204037,

        [XmlEnumAttribute("110204038")]
        Item110204038,

        [XmlEnumAttribute("410101001")]
        Item410101001,

        [XmlEnumAttribute("410101002")]
        Item410101002,

        [XmlEnumAttribute("410102001")]
        Item410102001,

        [XmlEnumAttribute("410102002")]
        Item410102002,

        [XmlEnumAttribute("110103014")]
        Item110103014,

        [XmlEnumAttribute("110203052")]
        Item110203052,

        [XmlEnumAttribute("330101005")]
        Item330101005,

        [XmlEnumAttribute("330101006")]
        Item330101006,

        [XmlEnumAttribute("110205029")]
        Item110205029,

        [XmlEnumAttribute("110203053")]
        Item110203053,

        [XmlEnumAttribute("120204008")]
        Item120204008,

        [XmlEnumAttribute("110203054")]
        Item110203054,

        [XmlEnumAttribute("110204039")]
        Item110204039,

        [XmlEnumAttribute("110201047")]
        Item110201047,

        [XmlEnumAttribute("110201048")]
        Item110201048,

        [XmlEnumAttribute("110103011")]
        Item110103011,

        [XmlEnumAttribute("340101001")]
        Item340101001,

        [XmlEnumAttribute("550101001")]
        Item550101001,

        [XmlEnumAttribute("550101005")]
        Item550101005,

        [XmlEnumAttribute("550101002")]
        Item550101002,

        [XmlEnumAttribute("550101003")]
        Item550101003,

        [XmlEnumAttribute("550101004")]
        Item550101004,

        [XmlEnumAttribute("130202007")]
        Item130202007,

        [XmlEnumAttribute("110105011")]
        Item110105011,

        [XmlEnumAttribute("110201049")]
        Item110201049,

        [XmlEnumAttribute("110101048")]
        Item110101048,

        [XmlEnumAttribute("110101033")]
        Item110101033,

        [XmlEnumAttribute("110101040")]
        Item110101040,

        [XmlEnumAttribute("110101045")]
        Item110101045,

        [XmlEnumAttribute("110101041")]
        Item110101041,

        [XmlEnumAttribute("110204040")]
        Item110204040,

        [XmlEnumAttribute("110105019")]
        Item110105019,

        [XmlEnumAttribute("110204041")]
        Item110204041,

        [XmlEnumAttribute("110105024")]
        Item110105024,

        [XmlEnumAttribute("110203070")]
        Item110203070,

        [XmlEnumAttribute("110203055")]
        Item110203055,

        [XmlEnumAttribute("110204042")]
        Item110204042,

        [XmlEnumAttribute("110203075")]
        Item110203075,

        [XmlEnumAttribute("110201050")]
        Item110201050,

        [XmlEnumAttribute("110201051")]
        Item110201051,

        [XmlEnumAttribute("110201052")]
        Item110201052,

        [XmlEnumAttribute("110201053")]
        Item110201053,

        [XmlEnumAttribute("120201002")]
        Item120201002,

        [XmlEnumAttribute("110105029")]
        Item110105029,

        [XmlEnumAttribute("110203056")]
        Item110203056,

        [XmlEnumAttribute("110204043")]
        Item110204043,

        [XmlEnumAttribute("110203090")]
        Item110203090,

        [XmlEnumAttribute("140101020")]
        Item140101020,

        [XmlEnumAttribute("110103018")]
        Item110103018,

        [XmlEnumAttribute("110106004")]
        Item110106004,

        [XmlEnumAttribute("110106005")]
        Item110106005,

        [XmlEnumAttribute("110106006")]
        Item110106006,

        [XmlEnumAttribute("110205028")]
        Item110205028,

        [XmlEnumAttribute("110105012")]
        Item110105012,

        [XmlEnumAttribute("120204005")]
        Item120204005,

        [XmlEnumAttribute("110205013")]
        Item110205013,

        [XmlEnumAttribute("110201054")]
        Item110201054,

        [XmlEnumAttribute("110101044")]
        Item110101044,

        [XmlEnumAttribute("110204044")]
        Item110204044,

        [XmlEnumAttribute("110203057")]
        Item110203057,

        [XmlEnumAttribute("110203058")]
        Item110203058,

        [XmlEnumAttribute("120206002")]
        Item120206002,

        [XmlEnumAttribute("120206004")]
        Item120206004,

        [XmlEnumAttribute("330201008")]
        Item330201008,

        [XmlEnumAttribute("330101004")]
        Item330101004,

        [XmlEnumAttribute("110204045")]
        Item110204045,

        [XmlEnumAttribute("110204046")]
        Item110204046,

        [XmlEnumAttribute("110201063")]
        Item110201063,

        [XmlEnumAttribute("110206013")]
        Item110206013,

        [XmlEnumAttribute("110203059")]
        Item110203059,

        [XmlEnumAttribute("110203060")]
        Item110203060,

        [XmlEnumAttribute("610101001")]
        Item610101001,

        [XmlEnumAttribute("610401001")]
        Item610401001,

        [XmlEnumAttribute("110206015")]
        Item110206015,

        [XmlEnumAttribute("110206014")]
        Item110206014,

        [XmlEnumAttribute("110204052")]
        Item110204052,

        [XmlEnumAttribute("110205015")]
        Item110205015,

        [XmlEnumAttribute("110205014")]
        Item110205014,

        [XmlEnumAttribute("110204047")]
        Item110204047,

        [XmlEnumAttribute("110205016")]
        Item110205016,

        [XmlEnumAttribute("110203061")]
        Item110203061,

        [XmlEnumAttribute("110205017")]
        Item110205017,

        [XmlEnumAttribute("110106009")]
        Item110106009,

        [XmlEnumAttribute("110203062")]
        Item110203062,

        [XmlEnumAttribute("110206016")]
        Item110206016,

        [XmlEnumAttribute("120205007")]
        Item120205007,

        [XmlEnumAttribute("120201003")]
        Item120201003,

        [XmlEnumAttribute("620101006")]
        Item620101006,

        [XmlEnumAttribute("120205008")]
        Item120205008,

        [XmlEnumAttribute("120204006")]
        Item120204006,

        [XmlEnumAttribute("110201055")]
        Item110201055,

        [XmlEnumAttribute("110201056")]
        Item110201056,

        [XmlEnumAttribute("110201057")]
        Item110201057,

        [XmlEnumAttribute("110103016")]
        Item110103016,

        [XmlEnumAttribute("110205018")]
        Item110205018,

        [XmlEnumAttribute("110107005")]
        Item110107005,

        [XmlEnumAttribute("330201002")]
        Item330201002,

        [XmlEnumAttribute("620504001")]
        Item620504001,

        [XmlEnumAttribute("620503001")]
        Item620503001,

        [XmlEnumAttribute("110101034")]
        Item110101034,

        [XmlEnumAttribute("110107004")]
        Item110107004,

        [XmlEnumAttribute("610101007")]
        Item610101007,

        [XmlEnumAttribute("610101008")]
        Item610101008,

        [XmlEnumAttribute("110105014")]
        Item110105014,

        [XmlEnumAttribute("110205019")]
        Item110205019,

        [XmlEnumAttribute("110103012")]
        Item110103012,

        [XmlEnumAttribute("110203063")]
        Item110203063,

        [XmlEnumAttribute("120204007")]
        Item120204007,

        [XmlEnumAttribute("110204048")]
        Item110204048,

        [XmlEnumAttribute("110105013")]
        Item110105013,

        [XmlEnumAttribute("110204049")]
        Item110204049,

        [XmlEnumAttribute("110206017")]
        Item110206017,

        [XmlEnumAttribute("110109001")]
        Item110109001,

        [XmlEnumAttribute("110107006")]
        Item110107006,

        [XmlEnumAttribute("110201059")]
        Item110201059,

        [XmlEnumAttribute("110201058")]
        Item110201058,

        [XmlEnumAttribute("640301001")]
        Item640301001,

        [XmlEnumAttribute("110101035")]
        Item110101035,

        [XmlEnumAttribute("110101036")]
        Item110101036,

        [XmlEnumAttribute("110101037")]
        Item110101037,

        [XmlEnumAttribute("110205020")]
        Item110205020,

        [XmlEnumAttribute("120207005")]
        Item120207005,

        [XmlEnumAttribute("110206018")]
        Item110206018,

        [XmlEnumAttribute("110108006")]
        Item110108006,

        [XmlEnumAttribute("110203076")]
        Item110203076,

        [XmlEnumAttribute("110205021")]
        Item110205021,

        [XmlEnumAttribute("330201003")]
        Item330201003,

        [XmlEnumAttribute("130101001")]
        Item130101001,

        [XmlEnumAttribute("110201060")]
        Item110201060,

        [XmlEnumAttribute("110203071")]
        Item110203071,

        [XmlEnumAttribute("110203065")]
        Item110203065,

        [XmlEnumAttribute("110203064")]
        Item110203064,

        [XmlEnumAttribute("110204050")]
        Item110204050,

        [XmlEnumAttribute("110203066")]
        Item110203066,

        [XmlEnumAttribute("110203067")]
        Item110203067,

        [XmlEnumAttribute("110201061")]
        Item110201061,

        [XmlEnumAttribute("110203068")]
        Item110203068,

        [XmlEnumAttribute("110105026")]
        Item110105026,

        [XmlEnumAttribute("110106008")]
        Item110106008,
    }

    /// <summary>
    /// CIDE Combustíveis
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdCombCIDE
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// BC do CIDE ( Quantidade comercializada)
        /// </summary>
        [XmlElement(Order = 0)]
        public string qBCProd { get; set; }
        /// <summary>
        /// Alíquota do CIDE  (em reais)
        /// </summary>
        [XmlElement(Order = 1)]
        public string vAliqProd { get; set; }
        /// <summary>
        /// Valor do CIDE
        /// </summary>
        [XmlElement(Order = 2)]
        public string vCIDE { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdCombCIDE));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdCombCIDE object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdCombCIDE object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdCombCIDE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdCombCIDE obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdCombCIDE);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdCombCIDE obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdCombCIDE Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdCombCIDE)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdCombCIDE Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdCombCIDE)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdCombCIDE object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdCombCIDE object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdCombCIDE object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdCombCIDE obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdCombCIDE);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdCombCIDE obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdCombCIDE LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// grupo do detalhamento de Medicamentos e de matérias-primas farmacêuticas
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdMed
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Número do lote do medicamento
        /// </summary>
        [XmlElement(Order = 0)]
        public string nLote { get; set; }
        /// <summary>
        /// Quantidade de produtos no lote
        /// </summary>
        [XmlElement(Order = 1)]
        public string qLote { get; set; }
        /// <summary>
        /// Data de Fabricação do medicamento (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 2)]
        public string dFab { get; set; }
        /// <summary>
        /// Data de validade do medicamento (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 3)]
        public string dVal { get; set; }
        /// <summary>
        /// Preço Máximo ao Consumidor
        /// </summary>
        [XmlElement(Order = 4)]
        public string vPMC { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdMed));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdMed object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdMed object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdMed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdMed obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdMed);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdMed obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdMed Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdMed)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdMed Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdMed)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdMed object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdMed object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdMed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdMed obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdMed);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdMed obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdMed LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Veículos novos
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetProdVeicProd
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Tipo da Operação (1 - Venda concessionária; 2 - Faturamento direto; 3 - Venda direta; 0 - Outros)
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetProdVeicProdTpOp tpOp { get; set; }
        /// <summary>
        /// Chassi do veículo - VIN (código-identificação-veículo)
        /// </summary>
        [XmlElement(Order = 1)]
        public string chassi { get; set; }
        /// <summary>
        /// Cor do veículo (código de cada montadora)
        /// </summary>
        [XmlElement(Order = 2)]
        public string cCor { get; set; }
        /// <summary>
        /// Descrição da cor
        /// </summary>
        [XmlElement(Order = 3)]
        public string xCor { get; set; }
        /// <summary>
        /// Potência máxima do motor do veículo em cavalo vapor (CV). (potência-veículo)
        /// </summary>
        [XmlElement(Order = 4)]
        public string pot { get; set; }
        /// <summary>
        /// Capacidade voluntária do motor expressa em centímetros cúbicos (CC). (cilindradas)
        /// </summary>
        [XmlElement(Order = 5)]
        public string cilin { get; set; }
        /// <summary>
        /// Peso líquido
        /// </summary>
        [XmlElement(Order = 6)]
        public string pesoL { get; set; }
        /// <summary>
        /// Peso bruto
        /// </summary>
        [XmlElement(Order = 7)]
        public string pesoB { get; set; }
        /// <summary>
        /// Serial (série)
        /// </summary>
        [XmlElement(Order = 8)]
        public string nSerie { get; set; }
        /// <summary>
        /// Tipo de combustível-Tabela RENAVAM: 01-Álcool; 02-Gasolina; 03-Diesel; 16-Álcool/Gas.; 17-Gas./Álcool/GNV; 18-Gasolina/Elétrico
        /// </summary>
        [XmlElement(Order = 9)]
        public string tpComb { get; set; }
        /// <summary>
        /// Número do motor
        /// </summary>
        [XmlElement(Order = 10)]
        public string nMotor { get; set; }
        /// <summary>
        /// CMT-Capacidade Máxima de Tração - em Toneladas 4 casas decimais
        /// </summary>
        [XmlElement(Order = 11)]
        public string CMT { get; set; }
        /// <summary>
        /// Distância entre eixos
        /// </summary>
        [XmlElement(Order = 12)]
        public string dist { get; set; }
        /// <summary>
        /// Ano Modelo de Fabricação
        /// </summary>
        [XmlElement(Order = 13)]
        public string anoMod { get; set; }
        /// <summary>
        /// Ano de Fabricação
        /// </summary>
        [XmlElement(Order = 14)]
        public string anoFab { get; set; }
        /// <summary>
        /// Tipo de pintura
        /// </summary>
        [XmlElement(Order = 15)]
        public string tpPint { get; set; }
        /// <summary>
        /// Tipo de veículo (utilizar tabela RENAVAM)
        /// </summary>
        [XmlElement(Order = 16)]
        public string tpVeic { get; set; }
        /// <summary>
        /// Espécie de veículo (utilizar tabela RENAVAM)
        /// </summary>
        [XmlElement(Order = 17)]
        public string espVeic { get; set; }
        /// <summary>
        /// Informa-se o veículo tem VIN (chassi) remarcado.
        /// R-Remarcado
        /// N-NormalVIN
        /// </summary>
        [XmlElement(Order = 18)]
        public TNFeInfNFeDetProdVeicProdVIN VIN { get; set; }
        /// <summary>
        /// Condição do veículo (1 - acabado; 2 - inacabado; 3 - semi-acabado)
        /// </summary>
        [XmlElement(Order = 19)]
        public TNFeInfNFeDetProdVeicProdCondVeic condVeic { get; set; }
        /// <summary>
        /// Código Marca Modelo (utilizar tabela RENAVAM)
        /// </summary>
        [XmlElement(Order = 20)]
        public string cMod { get; set; }
        /// <summary>
        /// Código da Cor Segundo as regras de pré-cadastro do DENATRAN: 01-AMARELO;02-AZUL;03-BEGE;04-BRANCA;05-CINZA;06-DOURADA;07-GRENA
        /// 08-LARANJA;09-MARROM;10-PRATA;11-PRETA;12-ROSA;13-ROXA;14-VERDE;15-VERMELHA;16-FANTASIA
        /// </summary>
        [XmlElement(Order = 21)]
        public string cCorDENATRAN { get; set; }
        /// <summary>
        /// Quantidade máxima de permitida de passageiros sentados, inclusive motorista.
        /// </summary>
        [XmlElement(Order = 22)]
        public string lota { get; set; }
        /// <summary>
        /// Restrição
        /// 0 - Não há;
        /// 1 - Alienação Fiduciária;
        /// 2 - Arrendamento Mercantil;
        /// 3 - Reserva de Domínio;
        /// 4 - Penhor de Veículos;
        /// 9 - outras.
        /// </summary>
        [XmlElement(Order = 23)]
        public TNFeInfNFeDetProdVeicProdTpRest tpRest { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetProdVeicProd));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetProdVeicProd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetProdVeicProd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdVeicProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetProdVeicProd obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdVeicProd);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetProdVeicProd obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetProdVeicProd Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetProdVeicProd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetProdVeicProd Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetProdVeicProd)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetProdVeicProd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetProdVeicProd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetProdVeicProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdVeicProd obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetProdVeicProd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetProdVeicProd obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetProdVeicProd LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdTpOp
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdVIN
    {

        /// <remarks/>
        R,

        /// <remarks/>
        N,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdCondVeic
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetProdVeicProdTpRest
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,
    }

    /// <summary>
    /// Tributos incidentes nos produtos ou serviços da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class DetalhesImposto
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Valor estimado total de impostos federais, estaduais e municipais
        /// </summary>
        [XmlElement(Order = 0)]
        public string vTotTrib { get; set; }
        [XmlElement("ICMS", typeof(TNFeInfNFeDetImpostoICMS), Order = 1)]
        [XmlElement("II", typeof(TNFeInfNFeDetImpostoII), Order = 1)]
        [XmlElement("IPI", typeof(TIpi), Order = 1)]
        [XmlElement("ISSQN", typeof(TNFeInfNFeDetImpostoISSQN), Order = 1)]
        public List<object> Items { get; set; }
        /// <summary>
        /// Dados do PIS
        /// </summary>
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoPIS PIS { get; set; }
        /// <summary>
        /// Dados do PIS Substituição Tributária
        /// </summary>
        [XmlElement(Order = 3)]
        public TNFeInfNFeDetImpostoPISST PISST { get; set; }
        /// <summary>
        /// Dados do COFINS
        /// </summary>
        [XmlElement(Order = 4)]
        public TNFeInfNFeDetImpostoCOFINS COFINS { get; set; }
        /// <summary>
        /// Dados do COFINS da
        /// Substituição Tributaria;
        /// </summary>
        [XmlElement(Order = 5)]
        public TNFeInfNFeDetImpostoCOFINSST COFINSST { get; set; }

        /// <summary>
        /// TNFeInfNFeDetImposto class constructor
        /// </summary>
        public DetalhesImposto()
        {
            COFINSST = null;
            COFINS = null;
            PISST = null;
            PIS = null;
            Items = new List<object>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DetalhesImposto));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImposto object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImposto object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DetalhesImposto obj, out Exception exception)
        {
            exception = null;
            obj = default(DetalhesImposto);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DetalhesImposto obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DetalhesImposto Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DetalhesImposto)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DetalhesImposto Deserialize(Stream s)
        {
            return ((DetalhesImposto)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImposto object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImposto object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DetalhesImposto obj, out Exception exception)
        {
            exception = null;
            obj = default(DetalhesImposto);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DetalhesImposto obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DetalhesImposto LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMS
    {

        private static XmlSerializer serializer;

        [XmlElement("ICMS00", typeof(TNFeInfNFeDetImpostoICMSICMS00), Order = 0)]
        [XmlElement("ICMS10", typeof(TNFeInfNFeDetImpostoICMSICMS10), Order = 0)]
        [XmlElement("ICMS20", typeof(TNFeInfNFeDetImpostoICMSICMS20), Order = 0)]
        [XmlElement("ICMS30", typeof(TNFeInfNFeDetImpostoICMSICMS30), Order = 0)]
        [XmlElement("ICMS40", typeof(TNFeInfNFeDetImpostoICMSICMS40), Order = 0)]
        [XmlElement("ICMS51", typeof(TNFeInfNFeDetImpostoICMSICMS51), Order = 0)]
        [XmlElement("ICMS60", typeof(TNFeInfNFeDetImpostoICMSICMS60), Order = 0)]
        [XmlElement("ICMS70", typeof(TNFeInfNFeDetImpostoICMSICMS70), Order = 0)]
        [XmlElement("ICMS90", typeof(ImpostoICMS90), Order = 0)]
        [XmlElement("ICMSPart", typeof(TNFeInfNFeDetImpostoICMSICMSPart), Order = 0)]
        [XmlElement("ICMSSN101", typeof(TNFeInfNFeDetImpostoICMSICMSSN101), Order = 0)]
        [XmlElement("ICMSSN102", typeof(TNFeInfNFeDetImpostoICMSICMSSN102), Order = 0)]
        [XmlElement("ICMSSN201", typeof(TNFeInfNFeDetImpostoICMSICMSSN201), Order = 0)]
        [XmlElement("ICMSSN202", typeof(TNFeInfNFeDetImpostoICMSICMSSN202), Order = 0)]
        [XmlElement("ICMSSN500", typeof(TNFeInfNFeDetImpostoICMSICMSSN500), Order = 0)]
        [XmlElement("ICMSSN900", typeof(ImpostoICMSN900), Order = 0)]
        [XmlElement("ICMSST", typeof(TNFeInfNFeDetImpostoICMSICMSST), Order = 0)]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMS obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMS obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMS Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMS Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMS)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMS obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMS obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMS LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS00
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS00CST CST { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS00ModBC modBC { get; set; }
        [XmlElement(Order = 3)]
        public string vBC { get; set; }
        [XmlElement(Order = 4)]
        public string pICMS { get; set; }
        [XmlElement(Order = 5)]
        public string vICMS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS00));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS00 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS00 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS00);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS00 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS00 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS00)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS00 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS00)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS00 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS00 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS00);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS00 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS00 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo Origem da mercadoria CST ICMS  origem da mercadoria: 0-Nacional exceto as indicadas nos códigos 3, 4, 5 e 8;
    /// 1-Estrangeira - Importação direta; 2-Estrangeira - Adquirida no mercado interno; 3-Nacional, conteudo superior 40% e inferior ou igual a 70%; 4-Nacional, processos produtivos básicos; 5-Nacional, conteudo inferior 40%; 6-Estrangeira - Importação direta, com similar nacional, lista CAMEX; 7-Estrangeira - mercado interno, sem simular,lista CAMEX;8-Nacional, Conteúdo de Importação superior a 70%.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum OrigemMercadoria
    {

        [XmlEnumAttribute("0")]
        Item0,

        [XmlEnumAttribute("1")]
        Item1,

        [XmlEnumAttribute("2")]
        Item2,

        [XmlEnumAttribute("3")]
        Item3,

        [XmlEnumAttribute("4")]
        Item4,

        [XmlEnumAttribute("5")]
        Item5,

        [XmlEnumAttribute("6")]
        Item6,

        [XmlEnumAttribute("7")]
        Item7,

        [XmlEnumAttribute("8")]
        Item8,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS00CST
    {

        /// <remarks/>
        [XmlEnumAttribute("00")]
        Item00,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS00ModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS10
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS10CST CST { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS10ModBC modBC { get; set; }
        [XmlElement(Order = 3)]
        public string vBC { get; set; }
        [XmlElement(Order = 4)]
        public string pICMS { get; set; }
        [XmlElement(Order = 5)]
        public string vICMS { get; set; }
        [XmlElement(Order = 6)]
        public TNFeInfNFeDetImpostoICMSICMS10ModBCST modBCST { get; set; }
        [XmlElement(Order = 7)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 8)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 9)]
        public string vBCST { get; set; }
        [XmlElement(Order = 10)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 11)]
        public string vICMSST { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS10));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS10 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS10 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS10 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS10);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS10 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS10 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS10)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS10 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS10)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS10 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS10 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS10 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS10);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS10 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS10 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10CST
    {

        /// <remarks/>
        [XmlEnumAttribute("10")]
        Item10,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10ModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS10ModBCST
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS20
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS20CST CST { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS20ModBC modBC { get; set; }
        [XmlElement(Order = 3)]
        public string pRedBC { get; set; }
        [XmlElement(Order = 4)]
        public string vBC { get; set; }
        [XmlElement(Order = 5)]
        public string pICMS { get; set; }
        [XmlElement(Order = 6)]
        public string vICMS { get; set; }
        [XmlElement(Order = 7)]
        public string vICMSDeson { get; set; }
        [XmlElement(Order = 8)]
        public TNFeInfNFeDetImpostoICMSICMS20MotDesICMS motDesICMS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS20));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS20 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS20 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS20 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS20 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS20);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS20 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS20 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS20)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS20 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS20)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS20 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS20 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS20 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS20 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS20);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS20 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS20 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS20CST
    {

        /// <remarks/>
        [XmlEnumAttribute("20")]
        Item20,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS20ModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS20MotDesICMS
    {

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,

        /// <remarks/>
        [XmlEnumAttribute("12")]
        Item12,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS30
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS30CST CST { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS30ModBCST modBCST { get; set; }
        [XmlElement(Order = 3)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 4)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 5)]
        public string vBCST { get; set; }
        [XmlElement(Order = 6)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 7)]
        public string vICMSST { get; set; }
        [XmlElement(Order = 8)]
        public string vICMSDeson { get; set; }
        [XmlElement(Order = 9)]
        public TNFeInfNFeDetImpostoICMSICMS30MotDesICMS motDesICMS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS30));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS30 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS30 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS30 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS30);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS30 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS30 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS30)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS30 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS30)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS30 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS30 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS30 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS30);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS30 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS30 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS30CST
    {

        /// <remarks/>
        [XmlEnumAttribute("30")]
        Item30,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS30ModBCST
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS30MotDesICMS
    {

        /// <remarks/>
        [XmlEnumAttribute("6")]
        Item6,

        /// <remarks/>
        [XmlEnumAttribute("7")]
        Item7,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS40
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS40CST CST { get; set; }
        [XmlElement(Order = 2)]
        public string vICMSDeson { get; set; }
        [XmlElement(Order = 3)]
        public TNFeInfNFeDetImpostoICMSICMS40MotDesICMS motDesICMS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS40));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS40 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS40 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS40);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS40 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS40 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS40)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS40 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS40)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS40 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS40 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS40);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS40 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS40 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS40CST
    {

        /// <remarks/>
        [XmlEnumAttribute("40")]
        Item40,

        /// <remarks/>
        [XmlEnumAttribute("41")]
        Item41,

        /// <remarks/>
        [XmlEnumAttribute("50")]
        Item50,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS40MotDesICMS
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,

        /// <remarks/>
        [XmlEnumAttribute("6")]
        Item6,

        /// <remarks/>
        [XmlEnumAttribute("7")]
        Item7,

        /// <remarks/>
        [XmlEnumAttribute("8")]
        Item8,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,

        /// <remarks/>
        [XmlEnumAttribute("10")]
        Item10,

        /// <remarks/>
        [XmlEnumAttribute("11")]
        Item11,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS51
    {

        private System.Nullable<TNFeInfNFeDetImpostoICMSICMS51ModBC> _modBC;

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS51CST CST { get; set; }
        [XmlElement(Order = 3)]
        public string pRedBC { get; set; }
        [XmlElement(Order = 4)]
        public string vBC { get; set; }
        [XmlElement(Order = 5)]
        public string pICMS { get; set; }
        [XmlElement(Order = 6)]
        public string vICMSOp { get; set; }
        [XmlElement(Order = 7)]
        public string pDif { get; set; }
        [XmlElement(Order = 8)]
        public string vICMSDif { get; set; }
        [XmlElement(Order = 9)]
        public string vICMS { get; set; }

        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS51ModBC modBC
        {
            get
            {
                if (_modBC.HasValue)
                {
                    return _modBC.Value;
                }
                else
                {
                    return default(TNFeInfNFeDetImpostoICMSICMS51ModBC);
                }
            }
            set
            {
                _modBC = value;
            }
        }

        [XmlIgnore]
        public bool modBCSpecified
        {
            get
            {
                return _modBC.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _modBC = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS51));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS51 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS51 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS51 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS51 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS51);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS51 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS51 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS51)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS51 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS51)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS51 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS51 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS51 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS51 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS51);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS51 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS51 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS51CST
    {

        /// <remarks/>
        [XmlEnumAttribute("51")]
        Item51,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS51ModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS60
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS60CST CST { get; set; }
        [XmlElement(Order = 2)]
        public string vBCSTRet { get; set; }
        [XmlElement(Order = 3)]
        public string vICMSSTRet { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS60));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS60 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS60 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS60 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS60 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS60);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS60 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS60 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS60)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS60 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS60)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS60 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS60 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS60 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS60 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS60);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS60 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS60 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS60CST
    {

        /// <remarks/>
        [XmlEnumAttribute("60")]
        Item60,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMS70
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS70CST CST { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS70ModBC modBC { get; set; }
        [XmlElement(Order = 3)]
        public string pRedBC { get; set; }
        [XmlElement(Order = 4)]
        public string vBC { get; set; }
        [XmlElement(Order = 5)]
        public string pICMS { get; set; }
        [XmlElement(Order = 6)]
        public string vICMS { get; set; }
        [XmlElement(Order = 7)]
        public TNFeInfNFeDetImpostoICMSICMS70ModBCST modBCST { get; set; }
        [XmlElement(Order = 8)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 9)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 10)]
        public string vBCST { get; set; }
        [XmlElement(Order = 11)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 12)]
        public string vICMSST { get; set; }
        [XmlElement(Order = 13)]
        public string vICMSDeson { get; set; }
        [XmlElement(Order = 14)]
        public TNFeInfNFeDetImpostoICMSICMS70MotDesICMS motDesICMS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMS70));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS70 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS70 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS70 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS70 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS70);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMS70 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS70 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMS70)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMS70 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMS70)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS70 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS70 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS70 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS70 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMS70);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMS70 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMS70 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70CST
    {

        /// <remarks/>
        [XmlEnumAttribute("70")]
        Item70,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70ModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70ModBCST
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS70MotDesICMS
    {

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,

        /// <remarks/>
        [XmlEnumAttribute("12")]
        Item12,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class ImpostoICMS90
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMS90CST CST { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMS90ModBC modBC { get; set; }
        [XmlElement(Order = 3)]
        public string vBC { get; set; }
        [XmlElement(Order = 4)]
        public string pRedBC { get; set; }
        [XmlElement(Order = 5)]
        public string pICMS { get; set; }
        [XmlElement(Order = 6)]
        public string vICMS { get; set; }
        [XmlElement(Order = 7)]
        public TNFeInfNFeDetImpostoICMSICMS90ModBCST modBCST { get; set; }
        [XmlElement(Order = 8)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 9)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 10)]
        public string vBCST { get; set; }
        [XmlElement(Order = 11)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 12)]
        public string vICMSST { get; set; }
        [XmlElement(Order = 13)]
        public string vICMSDeson { get; set; }
        [XmlElement(Order = 14)]
        public TNFeInfNFeDetImpostoICMSICMS90MotDesICMS motDesICMS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ImpostoICMS90));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS90 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMS90 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS90 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ImpostoICMS90 obj, out Exception exception)
        {
            exception = null;
            obj = default(ImpostoICMS90);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ImpostoICMS90 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ImpostoICMS90 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ImpostoICMS90)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ImpostoICMS90 Deserialize(Stream s)
        {
            return ((ImpostoICMS90)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMS90 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMS90 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMS90 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ImpostoICMS90 obj, out Exception exception)
        {
            exception = null;
            obj = default(ImpostoICMS90);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ImpostoICMS90 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ImpostoICMS90 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90CST
    {

        /// <remarks/>
        [XmlEnumAttribute("90")]
        Item90,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90ModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90ModBCST
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMS90MotDesICMS
    {

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,

        /// <remarks/>
        [XmlEnumAttribute("12")]
        Item12,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSPart
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSPartCST CST { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMSPartModBC modBC { get; set; }
        [XmlElement(Order = 3)]
        public string vBC { get; set; }
        [XmlElement(Order = 4)]
        public string pRedBC { get; set; }
        [XmlElement(Order = 5)]
        public string pICMS { get; set; }
        [XmlElement(Order = 6)]
        public string vICMS { get; set; }
        [XmlElement(Order = 7)]
        public TNFeInfNFeDetImpostoICMSICMSPartModBCST modBCST { get; set; }
        [XmlElement(Order = 8)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 9)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 10)]
        public string vBCST { get; set; }
        [XmlElement(Order = 11)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 12)]
        public string vICMSST { get; set; }
        [XmlElement(Order = 13)]
        public string pBCOp { get; set; }
        [XmlElement(Order = 14)]
        public TUf UFST { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSPart));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSPart object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSPart object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSPart obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSPart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSPart obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSPart Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSPart)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMSPart Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSPart)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSPart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSPart object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSPart obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSPart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSPart obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSPart LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartCST
    {

        /// <remarks/>
        [XmlEnumAttribute("10")]
        Item10,

        /// <remarks/>
        [XmlEnumAttribute("90")]
        Item90,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSPartModBCST
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN101
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN101CSOSN CSOSN { get; set; }
        [XmlElement(Order = 2)]
        public string pCredSN { get; set; }
        [XmlElement(Order = 3)]
        public string vCredICMSSN { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN101));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN101 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN101 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN101 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN101 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN101);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN101 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN101 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN101)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN101 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN101)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN101 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN101 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN101 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN101 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN101);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN101 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN101 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN101CSOSN
    {

        /// <remarks/>
        [XmlEnumAttribute("101")]
        Item101,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN102
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN102CSOSN CSOSN { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN102));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN102 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN102 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN102);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN102 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN102 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN102)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN102 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN102)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN102 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN102 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN102);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN102 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN102 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN102CSOSN
    {

        /// <remarks/>
        [XmlEnumAttribute("102")]
        Item102,

        /// <remarks/>
        [XmlEnumAttribute("103")]
        Item103,

        /// <remarks/>
        [XmlEnumAttribute("300")]
        Item300,

        /// <remarks/>
        [XmlEnumAttribute("400")]
        Item400,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN201
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN201CSOSN CSOSN { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMSSN201ModBCST modBCST { get; set; }
        [XmlElement(Order = 3)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 4)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 5)]
        public string vBCST { get; set; }
        [XmlElement(Order = 6)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 7)]
        public string vICMSST { get; set; }
        [XmlElement(Order = 8)]
        public string pCredSN { get; set; }
        [XmlElement(Order = 9)]
        public string vCredICMSSN { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN201));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN201 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN201 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN201 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN201 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN201);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN201 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN201 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN201)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN201 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN201)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN201 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN201 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN201 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN201 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN201);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN201 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN201 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN201CSOSN
    {

        /// <remarks/>
        [XmlEnumAttribute("201")]
        Item201,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN201ModBCST
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN202
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN202CSOSN CSOSN { get; set; }
        [XmlElement(Order = 2)]
        public TNFeInfNFeDetImpostoICMSICMSSN202ModBCST modBCST { get; set; }
        [XmlElement(Order = 3)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 4)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 5)]
        public string vBCST { get; set; }
        [XmlElement(Order = 6)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 7)]
        public string vICMSST { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN202));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN202 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN202 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN202 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN202 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN202);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN202 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN202 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN202)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN202 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN202)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN202 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN202 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN202 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN202 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN202);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN202 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN202 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN202CSOSN
    {

        /// <remarks/>
        [XmlEnumAttribute("202")]
        Item202,

        /// <remarks/>
        [XmlEnumAttribute("203")]
        Item203,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN202ModBCST
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSSN500
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSN500CSOSN CSOSN { get; set; }
        [XmlElement(Order = 2)]
        public string vBCSTRet { get; set; }
        [XmlElement(Order = 3)]
        public string vICMSSTRet { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSSN500));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN500 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN500 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN500 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN500 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN500);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSSN500 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN500 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSSN500)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN500 Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSSN500)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN500 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN500 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN500 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN500 obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSSN500);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSSN500 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSSN500 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSN500CSOSN
    {

        /// <remarks/>
        [XmlEnumAttribute("500")]
        Item500,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class ImpostoICMSN900
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public ICMS900CSOSN CSOSN { get; set; }
        [XmlElement(Order = 2)]
        public ICMS900ModBC modBC { get; set; }
        [XmlElement(Order = 3)]
        public string vBC { get; set; }
        [XmlElement(Order = 4)]
        public string pRedBC { get; set; }
        [XmlElement(Order = 5)]
        public string pICMS { get; set; }
        [XmlElement(Order = 6)]
        public string vICMS { get; set; }
        [XmlElement(Order = 7)]
        public ICMS900ModBcst modBCST { get; set; }
        [XmlElement(Order = 8)]
        public string pMVAST { get; set; }
        [XmlElement(Order = 9)]
        public string pRedBCST { get; set; }
        [XmlElement(Order = 10)]
        public string vBCST { get; set; }
        [XmlElement(Order = 11)]
        public string pICMSST { get; set; }
        [XmlElement(Order = 12)]
        public string vICMSST { get; set; }
        [XmlElement(Order = 13)]
        public string pCredSN { get; set; }
        [XmlElement(Order = 14)]
        public string vCredICMSSN { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ImpostoICMSN900));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN900 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ImpostoICMSN900 obj, out Exception exception)
        {
            exception = null;
            obj = default(ImpostoICMSN900);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ImpostoICMSN900 obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ImpostoICMSN900 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ImpostoICMSN900)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ImpostoICMSN900 Deserialize(Stream s)
        {
            return ((ImpostoICMSN900)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSSN900 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ImpostoICMSN900 obj, out Exception exception)
        {
            exception = null;
            obj = default(ImpostoICMSN900);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ImpostoICMSN900 obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ImpostoICMSN900 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum ICMS900CSOSN
    {

        /// <remarks/>
        [XmlEnumAttribute("900")]
        Item900,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum ICMS900ModBC
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum ICMS900ModBcst
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoICMSICMSST
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public OrigemMercadoria orig { get; set; }
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoICMSICMSSTCST CST { get; set; }
        [XmlElement(Order = 2)]
        public string vBCSTRet { get; set; }
        [XmlElement(Order = 3)]
        public string vICMSSTRet { get; set; }
        [XmlElement(Order = 4)]
        public string vBCSTDest { get; set; }
        [XmlElement(Order = 5)]
        public string vICMSSTDest { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoICMSICMSST));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoICMSICMSST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSST obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoICMSICMSST obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSST Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoICMSICMSST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoICMSICMSST Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoICMSICMSST)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoICMSICMSST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoICMSICMSST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoICMSICMSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSST obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoICMSICMSST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoICMSICMSST obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoICMSICMSST LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoICMSICMSSTCST
    {

        /// <remarks/>
        [XmlEnumAttribute("41")]
        Item41,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoII
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public string vBC { get; set; }
        [XmlElement(Order = 1)]
        public string vDespAdu { get; set; }
        [XmlElement(Order = 2)]
        public string vII { get; set; }
        [XmlElement(Order = 3)]
        public string vIOF { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoII));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoII object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoII object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoII object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoII obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoII);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoII obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoII Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoII)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoII Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoII)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoII object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoII object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoII object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoII obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoII);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoII obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoII LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoISSQN
    {

        private System.Nullable<Tpais> _cPais;

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public string vBC { get; set; }
        [XmlElement(Order = 1)]
        public string vAliq { get; set; }
        [XmlElement(Order = 2)]
        public string vISSQN { get; set; }
        [XmlElement(Order = 3)]
        public string cMunFG { get; set; }
        [XmlElement(Order = 4)]
        public TCListServ cListServ { get; set; }
        [XmlElement(Order = 5)]
        public string vDeducao { get; set; }
        [XmlElement(Order = 6)]
        public string vOutro { get; set; }
        [XmlElement(Order = 7)]
        public string vDescIncond { get; set; }
        [XmlElement(Order = 8)]
        public string vDescCond { get; set; }
        [XmlElement(Order = 9)]
        public string vISSRet { get; set; }
        [XmlElement(Order = 10)]
        public TNFeInfNFeDetImpostoISSQNIndISS indISS { get; set; }
        [XmlElement(Order = 11)]
        public string cServico { get; set; }
        [XmlElement(Order = 12)]
        public string cMun { get; set; }
        [XmlElement(Order = 14)]
        public string nProcesso { get; set; }
        [XmlElement(Order = 15)]
        public TNFeInfNFeDetImpostoISSQNIndIncentivo indIncentivo { get; set; }

        [XmlElement(Order = 13)]
        public Tpais cPais
        {
            get
            {
                if (_cPais.HasValue)
                {
                    return _cPais.Value;
                }
                else
                {
                    return default(Tpais);
                }
            }
            set
            {
                _cPais = value;
            }
        }

        [XmlIgnore]
        public bool cPaisSpecified
        {
            get
            {
                return _cPais.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _cPais = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoISSQN));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoISSQN object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoISSQN object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoISSQN obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoISSQN);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoISSQN obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoISSQN Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoISSQN)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoISSQN Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoISSQN)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoISSQN object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoISSQN object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoISSQN obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoISSQN);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoISSQN obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoISSQN LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo Código da Lista de Serviços LC 116/2003
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TCListServ
    {

        [XmlEnumAttribute("01.01")]
        Item0101,

        [XmlEnumAttribute("01.02")]
        Item0102,

        [XmlEnumAttribute("01.03")]
        Item0103,

        [XmlEnumAttribute("01.04")]
        Item0104,

        [XmlEnumAttribute("01.05")]
        Item0105,

        [XmlEnumAttribute("01.06")]
        Item0106,

        [XmlEnumAttribute("01.07")]
        Item0107,

        [XmlEnumAttribute("01.08")]
        Item0108,

        [XmlEnumAttribute("02.01")]
        Item0201,

        [XmlEnumAttribute("03.02")]
        Item0302,

        [XmlEnumAttribute("03.03")]
        Item0303,

        [XmlEnumAttribute("03.04")]
        Item0304,

        [XmlEnumAttribute("03.05")]
        Item0305,

        [XmlEnumAttribute("04.01")]
        Item0401,

        [XmlEnumAttribute("04.02")]
        Item0402,

        [XmlEnumAttribute("04.03")]
        Item0403,

        [XmlEnumAttribute("04.04")]
        Item0404,

        [XmlEnumAttribute("04.05")]
        Item0405,

        [XmlEnumAttribute("04.06")]
        Item0406,

        [XmlEnumAttribute("04.07")]
        Item0407,

        [XmlEnumAttribute("04.08")]
        Item0408,

        [XmlEnumAttribute("04.09")]
        Item0409,

        [XmlEnumAttribute("04.10")]
        Item0410,

        [XmlEnumAttribute("04.11")]
        Item0411,

        [XmlEnumAttribute("04.12")]
        Item0412,

        [XmlEnumAttribute("04.13")]
        Item0413,

        [XmlEnumAttribute("04.14")]
        Item0414,

        [XmlEnumAttribute("04.15")]
        Item0415,

        [XmlEnumAttribute("04.16")]
        Item0416,

        [XmlEnumAttribute("04.17")]
        Item0417,

        [XmlEnumAttribute("04.18")]
        Item0418,

        [XmlEnumAttribute("04.19")]
        Item0419,

        [XmlEnumAttribute("04.20")]
        Item0420,

        [XmlEnumAttribute("04.21")]
        Item0421,

        [XmlEnumAttribute("04.22")]
        Item0422,

        [XmlEnumAttribute("04.23")]
        Item0423,

        [XmlEnumAttribute("05.01")]
        Item0501,

        [XmlEnumAttribute("05.02")]
        Item0502,

        [XmlEnumAttribute("05.03")]
        Item0503,

        [XmlEnumAttribute("05.04")]
        Item0504,

        [XmlEnumAttribute("05.05")]
        Item0505,

        [XmlEnumAttribute("05.06")]
        Item0506,

        [XmlEnumAttribute("05.07")]
        Item0507,

        [XmlEnumAttribute("05.08")]
        Item0508,

        [XmlEnumAttribute("05.09")]
        Item0509,

        [XmlEnumAttribute("06.01")]
        Item0601,

        [XmlEnumAttribute("06.02")]
        Item0602,

        [XmlEnumAttribute("06.03")]
        Item0603,

        [XmlEnumAttribute("06.04")]
        Item0604,

        [XmlEnumAttribute("06.05")]
        Item0605,

        [XmlEnumAttribute("07.01")]
        Item0701,

        [XmlEnumAttribute("07.02")]
        Item0702,

        [XmlEnumAttribute("07.03")]
        Item0703,

        [XmlEnumAttribute("07.04")]
        Item0704,

        [XmlEnumAttribute("07.05")]
        Item0705,

        [XmlEnumAttribute("07.06")]
        Item0706,

        [XmlEnumAttribute("07.07")]
        Item0707,

        [XmlEnumAttribute("07.08")]
        Item0708,

        [XmlEnumAttribute("07.09")]
        Item0709,

        [XmlEnumAttribute("07.10")]
        Item0710,

        [XmlEnumAttribute("07.11")]
        Item0711,

        [XmlEnumAttribute("07.12")]
        Item0712,

        [XmlEnumAttribute("07.13")]
        Item0713,

        [XmlEnumAttribute("07.16")]
        Item0716,

        [XmlEnumAttribute("07.17")]
        Item0717,

        [XmlEnumAttribute("07.18")]
        Item0718,

        [XmlEnumAttribute("07.19")]
        Item0719,

        [XmlEnumAttribute("07.20")]
        Item0720,

        [XmlEnumAttribute("07.21")]
        Item0721,

        [XmlEnumAttribute("07.22")]
        Item0722,

        [XmlEnumAttribute("08.01")]
        Item0801,

        [XmlEnumAttribute("08.02")]
        Item0802,

        [XmlEnumAttribute("09.01")]
        Item0901,

        [XmlEnumAttribute("09.02")]
        Item0902,

        [XmlEnumAttribute("09.03")]
        Item0903,

        [XmlEnumAttribute("10.01")]
        Item1001,

        [XmlEnumAttribute("10.02")]
        Item1002,

        [XmlEnumAttribute("10.03")]
        Item1003,

        [XmlEnumAttribute("10.04")]
        Item1004,

        [XmlEnumAttribute("10.05")]
        Item1005,

        [XmlEnumAttribute("10.06")]
        Item1006,

        [XmlEnumAttribute("10.07")]
        Item1007,

        [XmlEnumAttribute("10.08")]
        Item1008,

        [XmlEnumAttribute("10.09")]
        Item1009,

        [XmlEnumAttribute("10.10")]
        Item1010,

        [XmlEnumAttribute("11.01")]
        Item1101,

        [XmlEnumAttribute("11.02")]
        Item1102,

        [XmlEnumAttribute("11.03")]
        Item1103,

        [XmlEnumAttribute("11.04")]
        Item1104,

        [XmlEnumAttribute("12.01")]
        Item1201,

        [XmlEnumAttribute("12.02")]
        Item1202,

        [XmlEnumAttribute("12.03")]
        Item1203,

        [XmlEnumAttribute("12.04")]
        Item1204,

        [XmlEnumAttribute("12.05")]
        Item1205,

        [XmlEnumAttribute("12.06")]
        Item1206,

        [XmlEnumAttribute("12.07")]
        Item1207,

        [XmlEnumAttribute("12.08")]
        Item1208,

        [XmlEnumAttribute("12.09")]
        Item1209,

        [XmlEnumAttribute("12.10")]
        Item1210,

        [XmlEnumAttribute("12.11")]
        Item1211,

        [XmlEnumAttribute("12.12")]
        Item1212,

        [XmlEnumAttribute("12.13")]
        Item1213,

        [XmlEnumAttribute("12.14")]
        Item1214,

        [XmlEnumAttribute("12.15")]
        Item1215,

        [XmlEnumAttribute("12.16")]
        Item1216,

        [XmlEnumAttribute("12.17")]
        Item1217,

        [XmlEnumAttribute("13.02")]
        Item1302,

        [XmlEnumAttribute("13.03")]
        Item1303,

        [XmlEnumAttribute("13.04")]
        Item1304,

        [XmlEnumAttribute("13.05")]
        Item1305,

        [XmlEnumAttribute("14.01")]
        Item1401,

        [XmlEnumAttribute("14.02")]
        Item1402,

        [XmlEnumAttribute("14.03")]
        Item1403,

        [XmlEnumAttribute("14.04")]
        Item1404,

        [XmlEnumAttribute("14.05")]
        Item1405,

        [XmlEnumAttribute("14.06")]
        Item1406,

        [XmlEnumAttribute("14.07")]
        Item1407,

        [XmlEnumAttribute("14.08")]
        Item1408,

        [XmlEnumAttribute("14.09")]
        Item1409,

        [XmlEnumAttribute("14.10")]
        Item1410,

        [XmlEnumAttribute("14.11")]
        Item1411,

        [XmlEnumAttribute("14.12")]
        Item1412,

        [XmlEnumAttribute("14.13")]
        Item1413,

        [XmlEnumAttribute("15.01")]
        Item1501,

        [XmlEnumAttribute("15.02")]
        Item1502,

        [XmlEnumAttribute("15.03")]
        Item1503,

        [XmlEnumAttribute("15.04")]
        Item1504,

        [XmlEnumAttribute("15.05")]
        Item1505,

        [XmlEnumAttribute("15.06")]
        Item1506,

        [XmlEnumAttribute("15.07")]
        Item1507,

        [XmlEnumAttribute("15.08")]
        Item1508,

        [XmlEnumAttribute("15.09")]
        Item1509,

        [XmlEnumAttribute("15.10")]
        Item1510,

        [XmlEnumAttribute("15.11")]
        Item1511,

        [XmlEnumAttribute("15.12")]
        Item1512,

        [XmlEnumAttribute("15.13")]
        Item1513,

        [XmlEnumAttribute("15.14")]
        Item1514,

        [XmlEnumAttribute("15.15")]
        Item1515,

        [XmlEnumAttribute("15.16")]
        Item1516,

        [XmlEnumAttribute("15.17")]
        Item1517,

        [XmlEnumAttribute("15.18")]
        Item1518,

        [XmlEnumAttribute("16.01")]
        Item1601,

        [XmlEnumAttribute("17.01")]
        Item1701,

        [XmlEnumAttribute("17.02")]
        Item1702,

        [XmlEnumAttribute("17.03")]
        Item1703,

        [XmlEnumAttribute("17.04")]
        Item1704,

        [XmlEnumAttribute("17.05")]
        Item1705,

        [XmlEnumAttribute("17.06")]
        Item1706,

        [XmlEnumAttribute("17.08")]
        Item1708,

        [XmlEnumAttribute("17.09")]
        Item1709,

        [XmlEnumAttribute("17.10")]
        Item1710,

        [XmlEnumAttribute("17.11")]
        Item1711,

        [XmlEnumAttribute("17.12")]
        Item1712,

        [XmlEnumAttribute("17.13")]
        Item1713,

        [XmlEnumAttribute("17.14")]
        Item1714,

        [XmlEnumAttribute("17.15")]
        Item1715,

        [XmlEnumAttribute("17.16")]
        Item1716,

        [XmlEnumAttribute("17.17")]
        Item1717,

        [XmlEnumAttribute("17.18")]
        Item1718,

        [XmlEnumAttribute("17.19")]
        Item1719,

        [XmlEnumAttribute("17.20")]
        Item1720,

        [XmlEnumAttribute("17.21")]
        Item1721,

        [XmlEnumAttribute("17.22")]
        Item1722,

        [XmlEnumAttribute("17.23")]
        Item1723,

        [XmlEnumAttribute("17.24")]
        Item1724,

        [XmlEnumAttribute("18.01")]
        Item1801,

        [XmlEnumAttribute("19.01")]
        Item1901,

        [XmlEnumAttribute("20.01")]
        Item2001,

        [XmlEnumAttribute("20.02")]
        Item2002,

        [XmlEnumAttribute("20.03")]
        Item2003,

        [XmlEnumAttribute("21.01")]
        Item2101,

        [XmlEnumAttribute("22.01")]
        Item2201,

        [XmlEnumAttribute("23.01")]
        Item2301,

        [XmlEnumAttribute("24.01")]
        Item2401,

        [XmlEnumAttribute("25.01")]
        Item2501,

        [XmlEnumAttribute("25.02")]
        Item2502,

        [XmlEnumAttribute("25.03")]
        Item2503,

        [XmlEnumAttribute("25.04")]
        Item2504,

        [XmlEnumAttribute("26.01")]
        Item2601,

        [XmlEnumAttribute("27.01")]
        Item2701,

        [XmlEnumAttribute("28.01")]
        Item2801,

        [XmlEnumAttribute("29.01")]
        Item2901,

        [XmlEnumAttribute("30.01")]
        Item3001,

        [XmlEnumAttribute("31.01")]
        Item3101,

        [XmlEnumAttribute("32.01")]
        Item3201,

        [XmlEnumAttribute("33.01")]
        Item3301,

        [XmlEnumAttribute("34.01")]
        Item3401,

        [XmlEnumAttribute("35.01")]
        Item3501,

        [XmlEnumAttribute("36.01")]
        Item3601,

        [XmlEnumAttribute("37.01")]
        Item3701,

        [XmlEnumAttribute("38.01")]
        Item3801,

        [XmlEnumAttribute("39.01")]
        Item3901,

        [XmlEnumAttribute("40.01")]
        Item4001,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoISSQNIndISS
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,

        /// <remarks/>
        [XmlEnumAttribute("6")]
        Item6,

        /// <remarks/>
        [XmlEnumAttribute("7")]
        Item7,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoISSQNIndIncentivo
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,
    }

    /// <summary>
    /// Dados do PIS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPIS
    {

        private static XmlSerializer serializer;

        [XmlElement("PISAliq", typeof(TNFeInfNFeDetImpostoPISPISAliq), Order = 0)]
        [XmlElement("PISNT", typeof(TNFeInfNFeDetImpostoPISPISNT), Order = 0)]
        [XmlElement("PISOutr", typeof(TNFeInfNFeDetImpostoPISPISOutr), Order = 0)]
        [XmlElement("PISQtde", typeof(TNFeInfNFeDetImpostoPISPISQtde), Order = 0)]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPIS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPIS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPIS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPIS obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPIS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPIS obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPIS Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoPIS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoPIS Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoPIS)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPIS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPIS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPIS obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPIS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPIS obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPIS LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Código de Situação Tributária do PIS.
    /// 01  Operação Tributável - Base de Cálculo = Valor da Operação Alíquota Normal (Cumulativo/Não Cumulativo);
    /// 02 - Operação Tributável - Base de Calculo = Valor da Operação (Alíquota Diferenciada);
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISAliq
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do PIS.
        /// 01  Operação Tributável - Base de Cálculo = Valor da Operação Alíquota Normal (Cumulativo/Não Cumulativo);
        /// 02 - Operação Tributável - Base de Calculo = Valor da Operação (Alíquota Diferenciada);
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISAliqCST CST { get; set; }
        /// <summary>
        /// Valor da BC do PIS
        /// </summary>
        [XmlElement(Order = 1)]
        public string vBC { get; set; }
        /// <summary>
        /// Alíquota do PIS (em percentual)
        /// </summary>
        [XmlElement(Order = 2)]
        public string pPIS { get; set; }
        /// <summary>
        /// Valor do PIS
        /// </summary>
        [XmlElement(Order = 3)]
        public string vPIS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISAliq));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISAliq object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISAliq obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISAliq);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISAliq obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISAliq Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoPISPISAliq Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISAliq)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISAliq obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISAliq);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISAliq obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISAliq LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISAliqCST
    {

        /// <remarks/>
        [XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [XmlEnumAttribute("02")]
        Item02,
    }

    /// <summary>
    /// Código de Situação Tributária do PIS.
    /// 04 - Operação Tributável - Tributação Monofásica - (Alíquota Zero);
    /// 06 - Operação Tributável - Alíquota Zero;
    /// 07 - Operação Isenta da contribuição;
    /// 08 - Operação Sem Incidência da contribuição;
    /// 09 - Operação com suspensão da contribuição;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISNT
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do PIS.
        /// 04 - Operação Tributável - Tributação Monofásica - (Alíquota Zero);
        /// 05 - Operação Tributável (ST);
        /// 06 - Operação Tributável - Alíquota Zero;
        /// 07 - Operação Isenta da contribuição;
        /// 08 - Operação Sem Incidência da contribuição;
        /// 09 - Operação com suspensão da contribuição;
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISNTCST CST { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISNT));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISNT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISNT obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISNT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISNT obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISNT Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoPISPISNT Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISNT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISNT obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISNT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISNT obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISNT LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISNTCST
    {

        /// <remarks/>
        [XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [XmlEnumAttribute("05")]
        Item05,

        /// <remarks/>
        [XmlEnumAttribute("06")]
        Item06,

        /// <remarks/>
        [XmlEnumAttribute("07")]
        Item07,

        /// <remarks/>
        [XmlEnumAttribute("08")]
        Item08,

        /// <remarks/>
        [XmlEnumAttribute("09")]
        Item09,
    }

    /// <summary>
    /// Código de Situação Tributária do PIS.
    /// 99 - Outras Operações.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISOutr
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do PIS.
        /// 99 - Outras Operações.
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISOutrCST CST { get; set; }
        [XmlElement("pPIS", Order = 1)]
        [XmlElement("qBCProd", Order = 1)]
        [XmlElement("vAliqProd", Order = 1)]
        [XmlElement("vBC", Order = 1)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items { get; set; }
        [XmlElement("ItemsElementName", Order = 2)]
        [XmlIgnore]
        public TNFeInfNFeDetImpostoPISPISOutrItemsChoiceType1[] ItemsElementName { get; set; }
        /// <summary>
        /// Valor do PIS
        /// </summary>
        [XmlElement(Order = 3)]
        public string vPIS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISOutr));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISOutr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISOutr obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISOutr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISOutr obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISOutr Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoPISPISOutr Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISOutr)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISOutr obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISOutr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISOutr obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISOutr LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISOutrCST
    {

        /// <remarks/>
        [XmlEnumAttribute("49")]
        Item49,

        /// <remarks/>
        [XmlEnumAttribute("50")]
        Item50,

        /// <remarks/>
        [XmlEnumAttribute("51")]
        Item51,

        /// <remarks/>
        [XmlEnumAttribute("52")]
        Item52,

        /// <remarks/>
        [XmlEnumAttribute("53")]
        Item53,

        /// <remarks/>
        [XmlEnumAttribute("54")]
        Item54,

        /// <remarks/>
        [XmlEnumAttribute("55")]
        Item55,

        /// <remarks/>
        [XmlEnumAttribute("56")]
        Item56,

        /// <remarks/>
        [XmlEnumAttribute("60")]
        Item60,

        /// <remarks/>
        [XmlEnumAttribute("61")]
        Item61,

        /// <remarks/>
        [XmlEnumAttribute("62")]
        Item62,

        /// <remarks/>
        [XmlEnumAttribute("63")]
        Item63,

        /// <remarks/>
        [XmlEnumAttribute("64")]
        Item64,

        /// <remarks/>
        [XmlEnumAttribute("65")]
        Item65,

        /// <remarks/>
        [XmlEnumAttribute("66")]
        Item66,

        /// <remarks/>
        [XmlEnumAttribute("67")]
        Item67,

        /// <remarks/>
        [XmlEnumAttribute("70")]
        Item70,

        /// <remarks/>
        [XmlEnumAttribute("71")]
        Item71,

        /// <remarks/>
        [XmlEnumAttribute("72")]
        Item72,

        /// <remarks/>
        [XmlEnumAttribute("73")]
        Item73,

        /// <remarks/>
        [XmlEnumAttribute("74")]
        Item74,

        /// <remarks/>
        [XmlEnumAttribute("75")]
        Item75,

        /// <remarks/>
        [XmlEnumAttribute("98")]
        Item98,

        /// <remarks/>
        [XmlEnumAttribute("99")]
        Item99,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeDetImpostoPISPISOutrItemsChoiceType1
    {

        /// <remarks/>
        pPIS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    /// <summary>
    /// Código de Situação Tributária do PIS.
    /// 03 - Operação Tributável - Base de Calculo = Quantidade Vendida x Alíquota por Unidade de Produto;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISPISQtde
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do PIS.
        /// 03 - Operação Tributável - Base de Calculo = Quantidade Vendida x Alíquota por Unidade de Produto;
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoPISPISQtdeCST CST { get; set; }
        /// <summary>
        /// Quantidade Vendida  (NT2011/004)
        /// </summary>
        [XmlElement(Order = 1)]
        public string qBCProd { get; set; }
        /// <summary>
        /// Alíquota do PIS (em reais) (NT2011/004)
        /// </summary>
        [XmlElement(Order = 2)]
        public string vAliqProd { get; set; }
        /// <summary>
        /// Valor do PIS
        /// </summary>
        [XmlElement(Order = 3)]
        public string vPIS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISPISQtde));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISQtde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISQtde obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISQtde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISPISQtde obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISQtde Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoPISPISQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoPISPISQtde Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISPISQtde)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISPISQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISQtde obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISPISQtde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISPISQtde obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISPISQtde LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoPISPISQtdeCST
    {

        /// <remarks/>
        [XmlEnumAttribute("03")]
        Item03,
    }

    /// <summary>
    /// Dados do PIS Substituição Tributária
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoPISST
    {

        private static XmlSerializer serializer;

        [XmlElement("pPIS", Order = 0)]
        [XmlElement("qBCProd", Order = 0)]
        [XmlElement("vAliqProd", Order = 0)]
        [XmlElement("vBC", Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items { get; set; }
        [XmlElement("ItemsElementName", Order = 1)]
        [XmlIgnore]
        public TNFeInfNFeDetImpostoPISSTItemsChoiceType2[] ItemsElementName { get; set; }
        /// <summary>
        /// Valor do PIS ST
        /// </summary>
        [XmlElement(Order = 2)]
        public string vPIS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoPISST));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoPISST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISST obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoPISST obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISST Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoPISST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoPISST Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoPISST)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoPISST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoPISST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISST obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoPISST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoPISST obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoPISST LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeDetImpostoPISSTItemsChoiceType2
    {

        /// <remarks/>
        pPIS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    /// <summary>
    /// Dados do COFINS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINS
    {

        private static XmlSerializer serializer;

        [XmlElement("COFINSAliq", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSAliq), Order = 0)]
        [XmlElement("COFINSNT", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSNT), Order = 0)]
        [XmlElement("COFINSOutr", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSOutr), Order = 0)]
        [XmlElement("COFINSQtde", typeof(TNFeInfNFeDetImpostoCOFINSCOFINSQtde), Order = 0)]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINS obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINS obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINS Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoCOFINS Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINS)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINS obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINS obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINS LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Código de Situação Tributária do COFINS.
    /// 01  Operação Tributável - Base de Cálculo = Valor da Operação Alíquota Normal (Cumulativo/Não Cumulativo);
    /// 02 - Operação Tributável - Base de Calculo = Valor da Operação (Alíquota Diferenciada);
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSAliq
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do COFINS.
        /// 01  Operação Tributável - Base de Cálculo = Valor da Operação Alíquota Normal (Cumulativo/Não Cumulativo);
        /// 02 - Operação Tributável - Base de Calculo = Valor da Operação (Alíquota Diferenciada);
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST CST { get; set; }
        /// <summary>
        /// Valor da BC do COFINS
        /// </summary>
        [XmlElement(Order = 1)]
        public string vBC { get; set; }
        /// <summary>
        /// Alíquota do COFINS (em percentual)
        /// </summary>
        [XmlElement(Order = 2)]
        public string pCOFINS { get; set; }
        /// <summary>
        /// Valor do COFINS
        /// </summary>
        [XmlElement(Order = 3)]
        public string vCOFINS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSAliq));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSAliq object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSAliq)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSAliq obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSAliq LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSAliqCST
    {

        /// <remarks/>
        [XmlEnumAttribute("01")]
        Item01,

        /// <remarks/>
        [XmlEnumAttribute("02")]
        Item02,
    }

    /// <summary>
    /// Código de Situação Tributária do COFINS:
    /// 04 - Operação Tributável - Tributação Monofásica - (Alíquota Zero);
    /// 06 - Operação Tributável - Alíquota Zero;
    /// 07 - Operação Isenta da contribuição;
    /// 08 - Operação Sem Incidência da contribuição;
    /// 09 - Operação com suspensão da contribuição;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSNT
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do COFINS:
        /// 04 - Operação Tributável - Tributação Monofásica - (Alíquota Zero);
        /// 05 - Operação Tributável (ST);
        /// 06 - Operação Tributável - Alíquota Zero;
        /// 07 - Operação Isenta da contribuição;
        /// 08 - Operação Sem Incidência da contribuição;
        /// 09 - Operação com suspensão da contribuição;
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSNTCST CST { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSNT));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSNT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSNT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSNT obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSNT LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSNTCST
    {

        /// <remarks/>
        [XmlEnumAttribute("04")]
        Item04,

        /// <remarks/>
        [XmlEnumAttribute("05")]
        Item05,

        /// <remarks/>
        [XmlEnumAttribute("06")]
        Item06,

        /// <remarks/>
        [XmlEnumAttribute("07")]
        Item07,

        /// <remarks/>
        [XmlEnumAttribute("08")]
        Item08,

        /// <remarks/>
        [XmlEnumAttribute("09")]
        Item09,
    }

    /// <summary>
    /// Código de Situação Tributária do COFINS:
    /// 49 - Outras Operações de Saída
    /// 50 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Tributada no Mercado Interno
    /// 51 - Operação com Direito a Crédito  Vinculada Exclusivamente a Receita Não Tributada no Mercado Interno
    /// 52 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita de Exportação
    /// 53 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno
    /// 54 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas no Mercado Interno e de Exportação
    /// 55 - Operação com Direito a Crédito - Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação
    /// 56 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação
    /// 60 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Tributada no Mercado Interno
    /// 61 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno
    /// 62 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita de Exportação
    /// 63 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno
    /// 64 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas no Mercado Interno e de Exportação
    /// 65 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação
    /// 66 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação
    /// 67 - Crédito Presumido - Outras Operações
    /// 70 - Operação de Aquisição sem Direito a Crédito
    /// 71 - Operação de Aquisição com Isenção
    /// 72 - Operação de Aquisição com Suspensão
    /// 73 - Operação de Aquisição a Alíquota Zero
    /// 74 - Operação de Aquisição sem Incidência da Contribuição
    /// 75 - Operação de Aquisição por Substituição Tributária
    /// 98 - Outras Operações de Entrada
    /// 99 - Outras Operações.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSOutr
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do COFINS:
        /// 49 - Outras Operações de Saída
        /// 50 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Tributada no Mercado Interno
        /// 51 - Operação com Direito a Crédito  Vinculada Exclusivamente a Receita Não Tributada no Mercado Interno
        /// 52 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita de Exportação
        /// 53 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno
        /// 54 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas no Mercado Interno e de Exportação
        /// 55 - Operação com Direito a Crédito - Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação
        /// 56 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação
        /// 60 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Tributada no Mercado Interno
        /// 61 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno
        /// 62 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita de Exportação
        /// 63 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno
        /// 64 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas no Mercado Interno e de Exportação
        /// 65 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação
        /// 66 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação
        /// 67 - Crédito Presumido - Outras Operações
        /// 70 - Operação de Aquisição sem Direito a Crédito
        /// 71 - Operação de Aquisição com Isenção
        /// 72 - Operação de Aquisição com Suspensão
        /// 73 - Operação de Aquisição a Alíquota Zero
        /// 74 - Operação de Aquisição sem Incidência da Contribuição
        /// 75 - Operação de Aquisição por Substituição Tributária
        /// 98 - Outras Operações de Entrada
        /// 99 - Outras Operações.
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST CST { get; set; }
        [XmlElement("pCOFINS", Order = 1)]
        [XmlElement("qBCProd", Order = 1)]
        [XmlElement("vAliqProd", Order = 1)]
        [XmlElement("vBC", Order = 1)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items { get; set; }
        [XmlElement("ItemsElementName", Order = 2)]
        [XmlIgnore]
        public TNFeInfNFeDetImpostoCOFINSCOFINSOutrItemsChoiceType3[] ItemsElementName { get; set; }
        /// <summary>
        /// Valor do COFINS
        /// </summary>
        [XmlElement(Order = 3)]
        public string vCOFINS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSOutr));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSOutr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSOutr)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSOutr obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSOutr LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSOutrCST
    {

        /// <remarks/>
        [XmlEnumAttribute("49")]
        Item49,

        /// <remarks/>
        [XmlEnumAttribute("50")]
        Item50,

        /// <remarks/>
        [XmlEnumAttribute("51")]
        Item51,

        /// <remarks/>
        [XmlEnumAttribute("52")]
        Item52,

        /// <remarks/>
        [XmlEnumAttribute("53")]
        Item53,

        /// <remarks/>
        [XmlEnumAttribute("54")]
        Item54,

        /// <remarks/>
        [XmlEnumAttribute("55")]
        Item55,

        /// <remarks/>
        [XmlEnumAttribute("56")]
        Item56,

        /// <remarks/>
        [XmlEnumAttribute("60")]
        Item60,

        /// <remarks/>
        [XmlEnumAttribute("61")]
        Item61,

        /// <remarks/>
        [XmlEnumAttribute("62")]
        Item62,

        /// <remarks/>
        [XmlEnumAttribute("63")]
        Item63,

        /// <remarks/>
        [XmlEnumAttribute("64")]
        Item64,

        /// <remarks/>
        [XmlEnumAttribute("65")]
        Item65,

        /// <remarks/>
        [XmlEnumAttribute("66")]
        Item66,

        /// <remarks/>
        [XmlEnumAttribute("67")]
        Item67,

        /// <remarks/>
        [XmlEnumAttribute("70")]
        Item70,

        /// <remarks/>
        [XmlEnumAttribute("71")]
        Item71,

        /// <remarks/>
        [XmlEnumAttribute("72")]
        Item72,

        /// <remarks/>
        [XmlEnumAttribute("73")]
        Item73,

        /// <remarks/>
        [XmlEnumAttribute("74")]
        Item74,

        /// <remarks/>
        [XmlEnumAttribute("75")]
        Item75,

        /// <remarks/>
        [XmlEnumAttribute("98")]
        Item98,

        /// <remarks/>
        [XmlEnumAttribute("99")]
        Item99,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSOutrItemsChoiceType3
    {

        /// <remarks/>
        pCOFINS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    /// <summary>
    /// Código de Situação Tributária do COFINS.
    /// 03 - Operação Tributável - Base de Calculo = Quantidade Vendida x Alíquota por Unidade de Produto;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSCOFINSQtde
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Código de Situação Tributária do COFINS.
        /// 03 - Operação Tributável - Base de Calculo = Quantidade Vendida x Alíquota por Unidade de Produto;
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST CST { get; set; }
        /// <summary>
        /// Quantidade Vendida (NT2011/004)
        /// </summary>
        [XmlElement(Order = 1)]
        public string qBCProd { get; set; }
        /// <summary>
        /// Alíquota do COFINS (em reais) (NT2011/004)
        /// </summary>
        [XmlElement(Order = 2)]
        public string vAliqProd { get; set; }
        /// <summary>
        /// Valor do COFINS
        /// </summary>
        [XmlElement(Order = 3)]
        public string vCOFINS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSCOFINSQtde));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSQtde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSCOFINSQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSCOFINSQtde)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSCOFINSQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSCOFINSQtde obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSCOFINSQtde LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeDetImpostoCOFINSCOFINSQtdeCST
    {

        /// <remarks/>
        [XmlEnumAttribute("03")]
        Item03,
    }

    /// <summary>
    /// Dados do COFINS da
    /// Substituição Tributaria;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoCOFINSST
    {

        private static XmlSerializer serializer;

        [XmlElement("pCOFINS", Order = 0)]
        [XmlElement("qBCProd", Order = 0)]
        [XmlElement("vAliqProd", Order = 0)]
        [XmlElement("vBC", Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items { get; set; }
        [XmlElement("ItemsElementName", Order = 1)]
        [XmlIgnore]
        public TNFeInfNFeDetImpostoCOFINSSTItemsChoiceType4[] ItemsElementName { get; set; }
        /// <summary>
        /// Valor do COFINS ST
        /// </summary>
        [XmlElement(Order = 2)]
        public string vCOFINS { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoCOFINSST));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSST obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoCOFINSST obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSST Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoCOFINSST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoCOFINSST Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoCOFINSST)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoCOFINSST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSST obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoCOFINSST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoCOFINSST obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoCOFINSST LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeDetImpostoCOFINSSTItemsChoiceType4
    {

        /// <remarks/>
        pCOFINS,

        /// <remarks/>
        qBCProd,

        /// <remarks/>
        vAliqProd,

        /// <remarks/>
        vBC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoDevol
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Percentual de mercadoria devolvida
        /// </summary>
        [XmlElement(Order = 0)]
        public string pDevol { get; set; }
        /// <summary>
        /// Informação de IPI devolvido
        /// </summary>
        [XmlElement(Order = 1)]
        public TNFeInfNFeDetImpostoDevolIPI IPI { get; set; }

        /// <summary>
        /// TNFeInfNFeDetImpostoDevol class constructor
        /// </summary>
        public TNFeInfNFeDetImpostoDevol()
        {
            IPI = new TNFeInfNFeDetImpostoDevolIPI();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoDevol));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoDevol object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoDevol object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoDevol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoDevol obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoDevol);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoDevol obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoDevol Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoDevol)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoDevol Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoDevol)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoDevol object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoDevol object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoDevol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoDevol obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoDevol);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoDevol obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoDevol LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Informação de IPI devolvido
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeDetImpostoDevolIPI
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Valor do IPI devolvido
        /// </summary>
        [XmlElement(Order = 0)]
        public string vIPIDevol { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeDetImpostoDevolIPI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoDevolIPI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeDetImpostoDevolIPI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoDevolIPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoDevolIPI obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoDevolIPI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeDetImpostoDevolIPI obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoDevolIPI Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeDetImpostoDevolIPI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeDetImpostoDevolIPI Deserialize(Stream s)
        {
            return ((TNFeInfNFeDetImpostoDevolIPI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeDetImpostoDevolIPI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeDetImpostoDevolIPI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeDetImpostoDevolIPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoDevolIPI obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeDetImpostoDevolIPI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeDetImpostoDevolIPI obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeDetImpostoDevolIPI LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados dos totais da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class NFeTotal
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Totais referentes ao ICMS
        /// </summary>
        [XmlElement(Order = 0)]
        public TotalICMS ICMSTot { get; set; }
        /// <summary>
        /// Totais referentes ao ISSQN
        /// </summary>
        [XmlElement(Order = 1)]
        public TNFeInfNFeTotalISSQNtot ISSQNtot { get; set; }
        /// <summary>
        /// Retenção de Tributos Federais
        /// </summary>
        [XmlElement(Order = 2)]
        public TNFeInfNFeTotalRetTrib retTrib { get; set; }

        /// <summary>
        /// TNFeInfNFeTotal class constructor
        /// </summary>
        public NFeTotal()
        {
            retTrib = null;
            ISSQNtot = null;
            ICMSTot = null;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NFeTotal));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NFeTotal obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeTotal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NFeTotal obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NFeTotal Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((NFeTotal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NFeTotal Deserialize(Stream s)
        {
            return ((NFeTotal)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTotal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NFeTotal obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeTotal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NFeTotal obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NFeTotal LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Totais referentes ao ICMS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TotalICMS
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// BC do ICMS
        /// </summary>
        [XmlElement(Order = 0)]
        public string vBC { get; set; }
        /// <summary>
        /// Valor Total do ICMS
        /// </summary>
        [XmlElement(Order = 1)]
        public string vICMS { get; set; }
        /// <summary>
        /// Valor Total do ICMS desonerado
        /// </summary>
        [XmlElement(Order = 2)]
        public string vICMSDeson { get; set; }
        /// <summary>
        /// BC do ICMS ST
        /// </summary>
        [XmlElement(Order = 3)]
        public string vBCST { get; set; }
        /// <summary>
        /// Valor Total do ICMS ST
        /// </summary>
        [XmlElement(Order = 4)]
        public string vST { get; set; }
        /// <summary>
        /// Valor Total dos produtos e serviços
        /// </summary>
        [XmlElement(Order = 5)]
        public string vProd { get; set; }
        /// <summary>
        /// Valor Total do Frete
        /// </summary>
        [XmlElement(Order = 6)]
        public string vFrete { get; set; }
        /// <summary>
        /// Valor Total do Seguro
        /// </summary>
        [XmlElement(Order = 7)]
        public string vSeg { get; set; }
        /// <summary>
        /// Valor Total do Desconto
        /// </summary>
        [XmlElement(Order = 8)]
        public string vDesc { get; set; }
        /// <summary>
        /// Valor Total do II
        /// </summary>
        [XmlElement(Order = 9)]
        public string vII { get; set; }
        /// <summary>
        /// Valor Total do IPI
        /// </summary>
        [XmlElement(Order = 10)]
        public string vIPI { get; set; }
        /// <summary>
        /// Valor do PIS
        /// </summary>
        [XmlElement(Order = 11)]
        public string vPIS { get; set; }
        /// <summary>
        /// Valor do COFINS
        /// </summary>
        [XmlElement(Order = 12)]
        public string vCOFINS { get; set; }
        /// <summary>
        /// Outras Despesas acessórias
        /// </summary>
        [XmlElement(Order = 13)]
        public string vOutro { get; set; }
        /// <summary>
        /// Valor Total da NF-e
        /// </summary>
        [XmlElement(Order = 14)]
        public string vNF { get; set; }
        /// <summary>
        /// Valor estimado total de impostos federais, estaduais e municipais
        /// </summary>
        [XmlElement(Order = 15)]
        public string vTotTrib { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TotalICMS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalICMSTot object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalICMSTot object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TotalICMS obj, out Exception exception)
        {
            exception = null;
            obj = default(TotalICMS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TotalICMS obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TotalICMS Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TotalICMS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TotalICMS Deserialize(Stream s)
        {
            return ((TotalICMS)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTotalICMSTot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalICMSTot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TotalICMS obj, out Exception exception)
        {
            exception = null;
            obj = default(TotalICMS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TotalICMS obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TotalICMS LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Totais referentes ao ISSQN
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalISSQNtot
    {

        private System.Nullable<TNFeInfNFeTotalISSQNtotCRegTrib> _cRegTrib;

        private static XmlSerializer serializer;

        /// <summary>
        /// Valor Total dos Serviços sob não-incidência ou não tributados pelo ICMS
        /// </summary>
        [XmlElement(Order = 0)]
        public string vServ { get; set; }
        /// <summary>
        /// Base de Cálculo do ISS
        /// </summary>
        [XmlElement(Order = 1)]
        public string vBC { get; set; }
        /// <summary>
        /// Valor Total do ISS
        /// </summary>
        [XmlElement(Order = 2)]
        public string vISS { get; set; }
        /// <summary>
        /// Valor do PIS sobre serviços
        /// </summary>
        [XmlElement(Order = 3)]
        public string vPIS { get; set; }
        /// <summary>
        /// Valor do COFINS sobre serviços
        /// </summary>
        [XmlElement(Order = 4)]
        public string vCOFINS { get; set; }
        /// <summary>
        /// Data da prestação do serviço  (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 5)]
        public string dCompet { get; set; }
        /// <summary>
        /// Valor dedução para redução da base de cálculo
        /// </summary>
        [XmlElement(Order = 6)]
        public string vDeducao { get; set; }
        /// <summary>
        /// Valor outras retenções
        /// </summary>
        [XmlElement(Order = 7)]
        public string vOutro { get; set; }
        /// <summary>
        /// Valor desconto incondicionado
        /// </summary>
        [XmlElement(Order = 8)]
        public string vDescIncond { get; set; }
        /// <summary>
        /// Valor desconto condicionado
        /// </summary>
        [XmlElement(Order = 9)]
        public string vDescCond { get; set; }
        /// <summary>
        /// Valor Total Retenção ISS
        /// </summary>
        [XmlElement(Order = 10)]
        public string vISSRet { get; set; }

        /// <summary>
        /// Código do regime especial de tributação
        /// </summary>
        [XmlElement(Order = 11)]
        public TNFeInfNFeTotalISSQNtotCRegTrib cRegTrib
        {
            get
            {
                if (_cRegTrib.HasValue)
                {
                    return _cRegTrib.Value;
                }
                else
                {
                    return default(TNFeInfNFeTotalISSQNtotCRegTrib);
                }
            }
            set
            {
                _cRegTrib = value;
            }
        }

        [XmlIgnore]
        public bool cRegTribSpecified
        {
            get
            {
                return _cRegTrib.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _cRegTrib = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTotalISSQNtot));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalISSQNtot object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalISSQNtot object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTotalISSQNtot obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalISSQNtot);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeTotalISSQNtot obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeTotalISSQNtot Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeTotalISSQNtot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeTotalISSQNtot Deserialize(Stream s)
        {
            return ((TNFeInfNFeTotalISSQNtot)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTotalISSQNtot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalISSQNtot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalISSQNtot obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalISSQNtot);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalISSQNtot obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTotalISSQNtot LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeTotalISSQNtotCRegTrib
    {

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [XmlEnumAttribute("5")]
        Item5,

        /// <remarks/>
        [XmlEnumAttribute("6")]
        Item6,
    }

    /// <summary>
    /// Retenção de Tributos Federais
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTotalRetTrib
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Valor Retido de PIS
        /// </summary>
        [XmlElement(Order = 0)]
        public string vRetPIS { get; set; }
        /// <summary>
        /// Valor Retido de COFINS
        /// </summary>
        [XmlElement(Order = 1)]
        public string vRetCOFINS { get; set; }
        /// <summary>
        /// Valor Retido de CSLL
        /// </summary>
        [XmlElement(Order = 2)]
        public string vRetCSLL { get; set; }
        /// <summary>
        /// Base de Cálculo do IRRF
        /// </summary>
        [XmlElement(Order = 3)]
        public string vBCIRRF { get; set; }
        /// <summary>
        /// Valor Retido de IRRF
        /// </summary>
        [XmlElement(Order = 4)]
        public string vIRRF { get; set; }
        /// <summary>
        /// Base de Cálculo da Retenção da Previdêncica Social
        /// </summary>
        [XmlElement(Order = 5)]
        public string vBCRetPrev { get; set; }
        /// <summary>
        /// Valor da Retenção da Previdêncica Social
        /// </summary>
        [XmlElement(Order = 6)]
        public string vRetPrev { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTotalRetTrib));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTotalRetTrib object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTotalRetTrib object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalRetTrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTotalRetTrib obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalRetTrib);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeTotalRetTrib obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeTotalRetTrib Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeTotalRetTrib)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeTotalRetTrib Deserialize(Stream s)
        {
            return ((TNFeInfNFeTotalRetTrib)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTotalRetTrib object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTotalRetTrib object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTotalRetTrib object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalRetTrib obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTotalRetTrib);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTotalRetTrib obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTotalRetTrib LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados dos transportes da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class NFeTransp
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Modalidade do frete
        /// 0- Por conta do emitente;
        /// 1- Por conta do destinatário/remetente;
        /// 2- Por conta de terceiros;
        /// 9- Sem frete (v2.0)
        /// </summary>
        [XmlElement(Order = 0)]
        public ModFrete modFrete { get; set; }
        /// <summary>
        /// Dados do transportador
        /// </summary>
        [XmlElement(Order = 1)]
        public TNFeInfNFeTranspTransporta transporta { get; set; }
        /// <summary>
        /// Dados da retenção  ICMS do Transporte
        /// </summary>
        [XmlElement(Order = 2)]
        public TNFeInfNFeTranspRetTransp retTransp { get; set; }
        [XmlElement("balsa", typeof(string), Order = 3)]
        [XmlElement("reboque", typeof(TVeiculo), Order = 3)]
        [XmlElement("vagao", typeof(string), Order = 3)]
        [XmlElement("veicTransp", typeof(TVeiculo), Order = 3)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [XmlElement("ItemsElementName", Order = 4)]
        [XmlIgnore]
        public TNFeInfNFeTranspItemsChoiceType5[] ItemsElementName { get; set; }
        /// <summary>
        /// Dados dos volumes
        /// </summary>
        [XmlElement("vol", Order = 5)]
        public List<TNFeInfNFeTranspVol> vol { get; set; }

        /// <summary>
        /// TNFeInfNFeTransp class constructor
        /// </summary>
        public NFeTransp()
        {
            vol = null;
            retTransp = null;
            transporta = null;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NFeTransp));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTransp object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTransp object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NFeTransp obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeTransp);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NFeTransp obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NFeTransp Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((NFeTransp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NFeTransp Deserialize(Stream s)
        {
            return ((NFeTransp)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTransp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTransp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NFeTransp obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeTransp);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NFeTransp obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NFeTransp LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum ModFrete
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        SemFrete,
    }

    /// <summary>
    /// Dados do transportador
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspTransporta
    {

        private static XmlSerializer serializer;

        [XmlElement("CNPJ", Order = 0)]
        [XmlElement("CPF", Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [XmlElement(Order = 1)]
        [XmlIgnore]
        public TNFeInfNFeTranspTransportaItemChoiceType6 ItemElementName { get; set; }
        /// <summary>
        /// Razão Social ou nome do transportador
        /// </summary>
        [XmlElement(Order = 2)]
        public string xNome { get; set; }
        /// <summary>
        /// Inscrição Estadual (v2.0)
        /// </summary>
        [XmlElement(Order = 3)]
        public string IE { get; set; }
        /// <summary>
        /// Endereço completo
        /// </summary>
        [XmlElement(Order = 4)]
        public string xEnder { get; set; }
        /// <summary>
        /// Nome do munícipio
        /// </summary>
        [XmlElement(Order = 5)]
        public string xMun { get; set; }
        /// <summary>
        /// Sigla da UF
        /// </summary>
        [XmlElement(Order = 6)]
        public TUf UF { get; set; }
        [XmlIgnore]
        public bool UFSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspTransporta));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspTransporta object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspTransporta object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspTransporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspTransporta obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspTransporta);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeTranspTransporta obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeTranspTransporta Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeTranspTransporta)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeTranspTransporta Deserialize(Stream s)
        {
            return ((TNFeInfNFeTranspTransporta)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTranspTransporta object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspTransporta object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspTransporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspTransporta obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspTransporta);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspTransporta obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspTransporta LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeTranspTransportaItemChoiceType6
    {

        /// <remarks/>
        CNPJ,

        /// <remarks/>
        CPF,
    }

    /// <summary>
    /// Dados da retenção  ICMS do Transporte
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspRetTransp
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Valor do Serviço
        /// </summary>
        [XmlElement(Order = 0)]
        public string vServ { get; set; }
        /// <summary>
        /// BC da Retenção do ICMS
        /// </summary>
        [XmlElement(Order = 1)]
        public string vBCRet { get; set; }
        /// <summary>
        /// Alíquota da Retenção
        /// </summary>
        [XmlElement(Order = 2)]
        public string pICMSRet { get; set; }
        /// <summary>
        /// Valor do ICMS Retido
        /// </summary>
        [XmlElement(Order = 3)]
        public string vICMSRet { get; set; }
        /// <summary>
        /// Código Fiscal de Operações e Prestações // PL_006f - alterado para permitir somente CFOP de transportes
        /// </summary>
        [XmlElement(Order = 4)]
        public TCfopTransp CFOP { get; set; }
        /// <summary>
        /// Código do Município de Ocorrência do Fato Gerador (utilizar a tabela do IBGE)
        /// </summary>
        [XmlElement(Order = 5)]
        public string cMunFG { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspRetTransp));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspRetTransp object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspRetTransp object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspRetTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspRetTransp obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspRetTransp);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeTranspRetTransp obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeTranspRetTransp Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeTranspRetTransp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeTranspRetTransp Deserialize(Stream s)
        {
            return ((TNFeInfNFeTranspRetTransp)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTranspRetTransp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspRetTransp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspRetTransp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspRetTransp obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspRetTransp);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspRetTransp obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspRetTransp LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo CFOP - Transportes - uso exclusivo na retenção - 31/05/2010
    /// Acrescimo dos CFOP de 5931/5932/6931/6932 no CFOP de retTransp
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TCfopTransp
    {

        [XmlEnumAttribute("5351")]
        Item5351,

        [XmlEnumAttribute("5352")]
        Item5352,

        [XmlEnumAttribute("5353")]
        Item5353,

        [XmlEnumAttribute("5354")]
        Item5354,

        [XmlEnumAttribute("5355")]
        Item5355,

        [XmlEnumAttribute("5356")]
        Item5356,

        [XmlEnumAttribute("5357")]
        Item5357,

        [XmlEnumAttribute("5359")]
        Item5359,

        [XmlEnumAttribute("5360")]
        Item5360,

        [XmlEnumAttribute("5931")]
        Item5931,

        [XmlEnumAttribute("5932")]
        Item5932,

        [XmlEnumAttribute("6351")]
        Item6351,

        [XmlEnumAttribute("6352")]
        Item6352,

        [XmlEnumAttribute("6353")]
        Item6353,

        [XmlEnumAttribute("6354")]
        Item6354,

        [XmlEnumAttribute("6355")]
        Item6355,

        [XmlEnumAttribute("6356")]
        Item6356,

        [XmlEnumAttribute("6357")]
        Item6357,

        [XmlEnumAttribute("6359")]
        Item6359,

        [XmlEnumAttribute("6360")]
        Item6360,

        [XmlEnumAttribute("6931")]
        Item6931,

        [XmlEnumAttribute("6932")]
        Item6932,

        [XmlEnumAttribute("7358")]
        Item7358,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IncludeInSchema = false)]
    public enum TNFeInfNFeTranspItemsChoiceType5
    {

        /// <remarks/>
        balsa,

        /// <remarks/>
        reboque,

        /// <remarks/>
        vagao,

        /// <remarks/>
        veicTransp,
    }

    /// <summary>
    /// Dados dos volumes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspVol
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Quantidade de volumes transportados
        /// </summary>
        [XmlElement(Order = 0)]
        public string qVol { get; set; }
        /// <summary>
        /// Espécie dos volumes transportados
        /// </summary>
        [XmlElement(Order = 1)]
        public string esp { get; set; }
        /// <summary>
        /// Marca dos volumes transportados
        /// </summary>
        [XmlElement(Order = 2)]
        public string marca { get; set; }
        /// <summary>
        /// Numeração dos volumes transportados
        /// </summary>
        [XmlElement(Order = 3)]
        public string nVol { get; set; }
        /// <summary>
        /// Peso líquido (em kg)
        /// </summary>
        [XmlElement(Order = 4)]
        public string pesoL { get; set; }
        /// <summary>
        /// Peso bruto (em kg)
        /// </summary>
        [XmlElement(Order = 5)]
        public string pesoB { get; set; }
        [XmlElement("lacres", Order = 6)]
        public List<TNFeInfNFeTranspVolLacres> lacres { get; set; }

        /// <summary>
        /// TNFeInfNFeTranspVol class constructor
        /// </summary>
        public TNFeInfNFeTranspVol()
        {
            lacres = new List<TNFeInfNFeTranspVolLacres>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspVol));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVol object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspVol object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspVol obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVol);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeTranspVol obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeTranspVol Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeTranspVol)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeTranspVol Deserialize(Stream s)
        {
            return ((TNFeInfNFeTranspVol)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTranspVol object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspVol object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVol obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVol);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVol obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspVol LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeTranspVolLacres
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Número dos Lacres
        /// </summary>
        [XmlElement(Order = 0)]
        public string nLacre { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeTranspVolLacres));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeTranspVolLacres object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeTranspVolLacres object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVolLacres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeTranspVolLacres obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVolLacres);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeTranspVolLacres obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeTranspVolLacres Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeTranspVolLacres)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeTranspVolLacres Deserialize(Stream s)
        {
            return ((TNFeInfNFeTranspVolLacres)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeTranspVolLacres object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeTranspVolLacres object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeTranspVolLacres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVolLacres obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeTranspVolLacres);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeTranspVolLacres obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeTranspVolLacres LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados da cobrança da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobr
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Dados da fatura
        /// </summary>
        [XmlElement(Order = 0)]
        public TNFeInfNFeCobrFat fat { get; set; }
        /// <summary>
        /// Dados das duplicatas NT 2011/004
        /// </summary>
        [XmlElement("dup", Order = 1)]
        public List<TNFeInfNFeCobrDup> dup { get; set; }

        /// <summary>
        /// TNFeInfNFeCobr class constructor
        /// </summary>
        public TNFeInfNFeCobr()
        {
            dup = new List<TNFeInfNFeCobrDup>();
            fat = new TNFeInfNFeCobrFat();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCobr));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCobr obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeCobr obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeCobr Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeCobr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeCobr Deserialize(Stream s)
        {
            return ((TNFeInfNFeCobr)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeCobr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobr obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobr obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCobr LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados da fatura
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobrFat
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Número da fatura
        /// </summary>
        [XmlElement(Order = 0)]
        public string nFat { get; set; }
        /// <summary>
        /// Valor original da fatura
        /// </summary>
        [XmlElement(Order = 1)]
        public string vOrig { get; set; }
        /// <summary>
        /// Valor do desconto da fatura
        /// </summary>
        [XmlElement(Order = 2)]
        public string vDesc { get; set; }
        /// <summary>
        /// Valor líquido da fatura
        /// </summary>
        [XmlElement(Order = 3)]
        public string vLiq { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCobrFat));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobrFat object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobrFat object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrFat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCobrFat obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrFat);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeCobrFat obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeCobrFat Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeCobrFat)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeCobrFat Deserialize(Stream s)
        {
            return ((TNFeInfNFeCobrFat)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeCobrFat object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobrFat object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrFat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrFat obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrFat);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrFat obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCobrFat LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados das duplicatas NT 2011/004
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCobrDup
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Número da duplicata
        /// </summary>
        [XmlElement(Order = 0)]
        public string nDup { get; set; }
        /// <summary>
        /// Data de vencimento da duplicata (AAAA-MM-DD)
        /// </summary>
        [XmlElement(Order = 1)]
        public string dVenc { get; set; }
        /// <summary>
        /// Valor da duplicata
        /// </summary>
        [XmlElement(Order = 2)]
        public string vDup { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCobrDup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCobrDup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCobrDup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrDup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCobrDup obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrDup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeCobrDup obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeCobrDup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeCobrDup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeCobrDup Deserialize(Stream s)
        {
            return ((TNFeInfNFeCobrDup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeCobrDup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCobrDup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCobrDup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrDup obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCobrDup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCobrDup obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCobrDup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados de Pagamento. Obrigatório apenas para (NFC-e) NT 2012/004
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class NFePag
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Forma de Pagamento:01-Dinheiro;02-Cheque;03-Cartão de Crédito;04-Cartão de Débito;05-Crédito Loja;10-Vale Alimentação;11-Vale Refeição;12-Vale Presente;13-Vale Combustível;99 - Outros
        /// </summary>
        [XmlElement(Order = 0)]
        public TipoPagamento tPag { get; set; }
        /// <summary>
        /// Valor do Pagamento
        /// </summary>
        [XmlElement(Order = 1)]
        public string vPag { get; set; }
        /// <summary>
        /// Grupo de Cartões
        /// </summary>
        [XmlElement(Order = 2)]
        public TNFeInfNFePagCard card { get; set; }

        /// <summary>
        /// TNFeInfNFePag class constructor
        /// </summary>
        public NFePag()
        {
            card = null;
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NFePag));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFePag object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFePag object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFePag object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NFePag obj, out Exception exception)
        {
            exception = null;
            obj = default(NFePag);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NFePag obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NFePag Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((NFePag)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NFePag Deserialize(Stream s)
        {
            return ((NFePag)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFePag object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFePag object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFePag object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NFePag obj, out Exception exception)
        {
            exception = null;
            obj = default(NFePag);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NFePag obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NFePag LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TipoPagamento
    {

        /// <remarks/>
        [XmlEnumAttribute("01")]
        Dinheiro=1,

        /// <remarks/>
        [XmlEnumAttribute("02")]
        Cheque=2,

        /// <remarks/>
        [XmlEnumAttribute("03")]
        CartaoCredito=3,

        /// <remarks/>
        [XmlEnumAttribute("04")]
        CartaoDebito=4,

        /// <remarks/>
        [XmlEnumAttribute("05")]
        CartaoLoja=5,

        /// <remarks/>
        [XmlEnumAttribute("10")]
        ValeAlimentacao=10,

        /// <remarks/>
        [XmlEnumAttribute("11")]
        ValeRefeicao=11,

        /// <remarks/>
        [XmlEnumAttribute("12")]
        ValePresente=12,

        /// <remarks/>
        [XmlEnumAttribute("13")]
        ValeCombustivel=13,

        /// <remarks/>
        [XmlEnumAttribute("99")]
        Outros=99,
    }

    /// <summary>
    /// Grupo de Cartões
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFePagCard
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// CNPJ da credenciadora de cartão de crédito/débito
        /// </summary>
        [XmlElement(Order = 0)]
        public string CNPJ { get; set; }
        /// <summary>
        /// Bandeira da operadora de cartão de crédito/débito:01Visa; 02Mastercard; 03American Express; 04Sorocred; 99Outros
        /// </summary>
        [XmlElement(Order = 1)]
        public TNFeInfNFePagCardTBand tBand { get; set; }
        /// <summary>
        /// Número de autorização da operação cartão de crédito/débito
        /// </summary>
        [XmlElement(Order = 2)]
        public string cAut { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFePagCard));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFePagCard object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFePagCard object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFePagCard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFePagCard obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFePagCard);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFePagCard obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFePagCard Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFePagCard)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFePagCard Deserialize(Stream s)
        {
            return ((TNFeInfNFePagCard)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFePagCard object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFePagCard object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFePagCard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFePagCard obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFePagCard);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFePagCard obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFePagCard LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFePagCardTBand
    {

        /// <remarks/>
        [XmlEnumAttribute("01")]
        Visa,

        /// <remarks/>
        [XmlEnumAttribute("02")]
        Mastercard,

        /// <remarks/>
        [XmlEnumAttribute("03")]
        Amex,

        /// <remarks/>
        [XmlEnumAttribute("04")]
        Sorocred,

        /// <remarks/>
        [XmlEnumAttribute("99")]
        Outros,
    }

    /// <summary>
    /// Informações adicionais da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class NFeInfAdicional
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Informações adicionais de interesse do Fisco (v2.0)
        /// </summary>
        [XmlElement(Order = 0)]
        public string infAdFisco { get; set; }
        /// <summary>
        /// Informações complementares de interesse do Contribuinte
        /// </summary>
        [XmlElement(Order = 1)]
        public string infCpl { get; set; }
        /// <summary>
        /// Campo de uso livre do contribuinte
        /// informar o nome do campo no atributo xCampo
        /// e o conteúdo do campo no xTexto
        /// </summary>
        [XmlElement("obsCont", Order = 2)]
        public List<TNFeInfNFeInfAdicObsCont> obsCont { get; set; }
        /// <summary>
        /// Campo de uso exclusivo do Fisco
        /// informar o nome do campo no atributo xCampo
        /// e o conteúdo do campo no xTexto
        /// </summary>
        [XmlElement("obsFisco", Order = 3)]
        public List<TNFeInfNFeInfAdicObsFisco> obsFisco { get; set; }
        /// <summary>
        /// Grupo de informações do  processo referenciado
        /// </summary>
        [XmlElement("procRef", Order = 4)]
        public List<TNFeInfNFeInfAdicProcRef> procRef { get; set; }

        /// <summary>
        /// TNFeInfNFeInfAdic class constructor
        /// </summary>
        public NFeInfAdicional()
        {
            procRef = new List<TNFeInfNFeInfAdicProcRef>();
            obsFisco = new List<TNFeInfNFeInfAdicObsFisco>();
            obsCont = new List<TNFeInfNFeInfAdicObsCont>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NFeInfAdicional));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NFeInfAdicional obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeInfAdicional);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NFeInfAdicional obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NFeInfAdicional Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((NFeInfAdicional)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NFeInfAdicional Deserialize(Stream s)
        {
            return ((NFeInfAdicional)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NFeInfAdicional obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeInfAdicional);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NFeInfAdicional obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NFeInfAdicional LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Campo de uso livre do contribuinte
    /// informar o nome do campo no atributo xCampo
    /// e o conteúdo do campo no xTexto
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicObsCont
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public string xTexto { get; set; }
        [XmlAttribute]
        public string xCampo { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeInfAdicObsCont));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsCont object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicObsCont object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsCont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsCont obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsCont);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsCont obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsCont Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeInfAdicObsCont)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeInfAdicObsCont Deserialize(Stream s)
        {
            return ((TNFeInfNFeInfAdicObsCont)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsCont object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicObsCont object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsCont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsCont obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsCont);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsCont obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsCont LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Campo de uso exclusivo do Fisco
    /// informar o nome do campo no atributo xCampo
    /// e o conteúdo do campo no xTexto
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicObsFisco
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public string xTexto { get; set; }
        [XmlAttribute]
        public string xCampo { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeInfAdicObsFisco));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsFisco object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicObsFisco object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsFisco obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsFisco);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeInfAdicObsFisco obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsFisco Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeInfAdicObsFisco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeInfAdicObsFisco Deserialize(Stream s)
        {
            return ((TNFeInfNFeInfAdicObsFisco)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicObsFisco object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicObsFisco object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsFisco obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicObsFisco);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicObsFisco obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicObsFisco LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Grupo de informações do  processo referenciado
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeInfAdicProcRef
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Indentificador do processo ou ato
        /// concessório
        /// </summary>
        [XmlElement(Order = 0)]
        public string nProc { get; set; }
        /// <summary>
        /// Origem do processo, informar com:
        /// 0 - SEFAZ;
        /// 1 - Justiça Federal;
        /// 2 - Justiça Estadual;
        /// 3 - Secex/RFB;
        /// 9 - Outros
        /// </summary>
        [XmlElement(Order = 1)]
        public TNFeInfNFeInfAdicProcRefIndProc indProc { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeInfAdicProcRef));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicProcRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeInfAdicProcRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicProcRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeInfAdicProcRef obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicProcRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeInfAdicProcRef obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicProcRef Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeInfAdicProcRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeInfAdicProcRef Deserialize(Stream s)
        {
            return ((TNFeInfNFeInfAdicProcRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeInfAdicProcRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeInfAdicProcRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeInfAdicProcRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicProcRef obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeInfAdicProcRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeInfAdicProcRef obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeInfAdicProcRef LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum TNFeInfNFeInfAdicProcRefIndProc
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [XmlEnumAttribute("9")]
        Item9,
    }

    /// <summary>
    /// Informações de exportação
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeExporta
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Sigla da UF de Embarque ou de transposição de fronteira
        /// </summary>
        [XmlElement(Order = 0)]
        public TUfEmi UFSaidaPais { get; set; }
        /// <summary>
        /// Local de Embarque ou de transposição de fronteira
        /// </summary>
        [XmlElement(Order = 1)]
        public string xLocExporta { get; set; }
        /// <summary>
        /// Descrição do local de despacho
        /// </summary>
        [XmlElement(Order = 2)]
        public string xLocDespacho { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeExporta));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeExporta object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeExporta object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeExporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeExporta obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeExporta);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeExporta obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeExporta Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeExporta)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeExporta Deserialize(Stream s)
        {
            return ((TNFeInfNFeExporta)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeExporta object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeExporta object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeExporta object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeExporta obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeExporta);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeExporta obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeExporta LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Informações de compras  (Nota de Empenho, Pedido e Contrato)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCompra
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Informação da Nota de Empenho de compras públicas (NT2011/004)
        /// </summary>
        [XmlElement(Order = 0)]
        public string xNEmp { get; set; }
        /// <summary>
        /// Informação do pedido
        /// </summary>
        [XmlElement(Order = 1)]
        public string xPed { get; set; }
        /// <summary>
        /// Informação do contrato
        /// </summary>
        [XmlElement(Order = 2)]
        public string xCont { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCompra));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCompra object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCompra object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCompra object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCompra obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCompra);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeCompra obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeCompra Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeCompra)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeCompra Deserialize(Stream s)
        {
            return ((TNFeInfNFeCompra)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeCompra object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCompra object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCompra object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCompra obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCompra);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCompra obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCompra LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Informações de registro aquisições de cana
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCana
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Identificação da safra
        /// </summary>
        [XmlElement(Order = 0)]
        public string safra { get; set; }
        /// <summary>
        /// Mês e Ano de Referência, formato: MM/AAAA
        /// </summary>
        [XmlElement(Order = 1)]
        public string @ref { get; set; }
        /// <summary>
        /// Fornecimentos diários
        /// </summary>
        [XmlElement("forDia", Order = 2)]
        public List<TNFeInfNFeCanaForDia> forDia { get; set; }
        /// <summary>
        /// Total do mês
        /// </summary>
        [XmlElement(Order = 3)]
        public string qTotMes { get; set; }
        /// <summary>
        /// Total Anterior
        /// </summary>
        [XmlElement(Order = 4)]
        public string qTotAnt { get; set; }
        /// <summary>
        /// Total Geral
        /// </summary>
        [XmlElement(Order = 5)]
        public string qTotGer { get; set; }
        /// <summary>
        /// Deduções - Taxas e Contribuições
        /// </summary>
        [XmlElement("deduc", Order = 6)]
        public List<TNFeInfNFeCanaDeduc> deduc { get; set; }
        /// <summary>
        /// Valor  dos fornecimentos
        /// </summary>
        [XmlElement(Order = 7)]
        public string vFor { get; set; }
        /// <summary>
        /// Valor Total das Deduções
        /// </summary>
        [XmlElement(Order = 8)]
        public string vTotDed { get; set; }
        /// <summary>
        /// Valor Líquido dos fornecimentos
        /// </summary>
        [XmlElement(Order = 9)]
        public string vLiqFor { get; set; }

        /// <summary>
        /// TNFeInfNFeCana class constructor
        /// </summary>
        public TNFeInfNFeCana()
        {
            deduc = new List<TNFeInfNFeCanaDeduc>();
            forDia = new List<TNFeInfNFeCanaForDia>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCana));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCana object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCana object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCana object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCana obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCana);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeCana obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeCana Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeCana)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeCana Deserialize(Stream s)
        {
            return ((TNFeInfNFeCana)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeCana object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCana object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCana object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCana obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCana);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCana obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCana LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Fornecimentos diários
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCanaForDia
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Quantidade em quilogramas - peso líquido
        /// </summary>
        [XmlElement(Order = 0)]
        public string qtde { get; set; }
        /// <summary>
        /// Número do dia
        /// </summary>
        [XmlAttribute]
        public string dia { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCanaForDia));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCanaForDia object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCanaForDia object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaForDia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCanaForDia obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaForDia);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeCanaForDia obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeCanaForDia Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeCanaForDia)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeCanaForDia Deserialize(Stream s)
        {
            return ((TNFeInfNFeCanaForDia)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeCanaForDia object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCanaForDia object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaForDia object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaForDia obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaForDia);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaForDia obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCanaForDia LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Deduções - Taxas e Contribuições
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TNFeInfNFeCanaDeduc
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Descrição da Dedução
        /// </summary>
        [XmlElement(Order = 0)]
        public string xDed { get; set; }
        /// <summary>
        /// valor da dedução
        /// </summary>
        [XmlElement(Order = 1)]
        public string vDed { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TNFeInfNFeCanaDeduc));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNFeInfNFeCanaDeduc object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNFeInfNFeCanaDeduc object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaDeduc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TNFeInfNFeCanaDeduc obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaDeduc);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TNFeInfNFeCanaDeduc obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TNFeInfNFeCanaDeduc Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TNFeInfNFeCanaDeduc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TNFeInfNFeCanaDeduc Deserialize(Stream s)
        {
            return ((TNFeInfNFeCanaDeduc)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNFeInfNFeCanaDeduc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNFeInfNFeCanaDeduc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNFeInfNFeCanaDeduc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaDeduc obj, out Exception exception)
        {
            exception = null;
            obj = default(TNFeInfNFeCanaDeduc);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNFeInfNFeCanaDeduc obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNFeInfNFeCanaDeduc LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo Protocolo de status resultado do processamento da NF-e
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true, ElementName = "protNFe")]
    public partial class TProtNFe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Dados do protocolo de status
        /// </summary>
        [XmlElement(Order = 0)]
        public TProtNFeInfProt infProt { get; set; }
        [XmlElement(Namespace = "http://www.w3.org/2000/09/xmldsig#", Order = 1)]
        public SignatureType Signature { get; set; }
        [XmlAttribute]
        public string versao { get; set; }

        /// <summary>
        /// TProtNFe class constructor
        /// </summary>
        public TProtNFe()
        {
            Signature = new SignatureType();
            infProt = new TProtNFeInfProt();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TProtNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TProtNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TProtNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TProtNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TProtNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TProtNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TProtNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TProtNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TProtNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TProtNFe Deserialize(Stream s)
        {
            return ((TProtNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TProtNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TProtNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TProtNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TProtNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TProtNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TProtNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TProtNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados do protocolo de status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TProtNFeInfProt
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Identificação do Ambiente:
        /// 1 - Produção
        /// 2 - Homologação
        /// </summary>
        [XmlElement(Order = 0)]
        public AmbienteSefaz tpAmb { get; set; }
        /// <summary>
        /// Versão do Aplicativo que processou a NF-e
        /// </summary>
        [XmlElement(Order = 1)]
        public string verAplic { get; set; }
        /// <summary>
        /// Chaves de acesso da NF-e, compostas por: UF do emitente, AAMM da emissão da NFe, CNPJ do emitente, modelo, série e número da NF-e e código numérico+DV.
        /// </summary>
        [XmlElement(Order = 2)]
        public string chNFe { get; set; }
        /// <summary>
        /// Data e hora de processamento, no formato AAAA-MM-DDTHH:MM:SSTZD. Deve ser preenchida com data e hora da gravação no Banco em caso de Confirmação. Em caso de Rejeição, com data e hora do recebimento do Lote de NF-e enviado.
        /// </summary>
        [XmlElement(Order = 3)]
        public string dhRecbto { get; set; }
        /// <summary>
        /// Número do Protocolo de Status da NF-e. 1 posição (1  Secretaria de Fazenda Estadual 2  Receita Federal); 2 - códiga da UF - 2 posições ano; 10 seqüencial no ano.
        /// </summary>
        [XmlElement(Order = 4)]
        public string nProt { get; set; }
        /// <summary>
        /// Digest Value da NF-e processada. Utilizado para conferir a integridade da NF-e original.
        /// </summary>
        [XmlElement(DataType = "base64Binary", Order = 5)]
        public byte[] digVal { get; set; }
        /// <summary>
        /// Código do status da mensagem enviada.
        /// </summary>
        [XmlElement(Order = 6)]
        public string cStat { get; set; }
        /// <summary>
        /// Descrição literal do status do serviço solicitado.
        /// </summary>
        [XmlElement(Order = 7)]
        public string xMotivo { get; set; }
        [XmlAttributeAttribute(DataType = "ID")]
        public string Id { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TProtNFeInfProt));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TProtNFeInfProt object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TProtNFeInfProt object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TProtNFeInfProt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TProtNFeInfProt obj, out Exception exception)
        {
            exception = null;
            obj = default(TProtNFeInfProt);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TProtNFeInfProt obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TProtNFeInfProt Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TProtNFeInfProt)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TProtNFeInfProt Deserialize(Stream s)
        {
            return ((TProtNFeInfProt)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TProtNFeInfProt object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TProtNFeInfProt object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TProtNFeInfProt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TProtNFeInfProt obj, out Exception exception)
        {
            exception = null;
            obj = default(TProtNFeInfProt);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TProtNFeInfProt obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TProtNFeInfProt LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo Pedido de Concessão de Autorização da Nota Fiscal Eletrônica
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true, ElementName = "enviNFe")]
    public partial class TEnviNFe
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public string idLote { get; set; }
        /// <summary>
        /// Indicador de processamento síncrono. 0=NÃO; 1=SIM=Síncrono
        /// </summary>
        [XmlElement(Order = 1)]
        public IndicadorEnvioSincrono indSinc { get; set; }
        [XmlElement("NFe", Order = 2)]
        public List<TNFe> NFe { get; set; }
        [XmlAttribute]
        public string versao { get; set; }

        /// <summary>
        /// TEnviNFe class constructor
        /// </summary>
        public TEnviNFe()
        {
            NFe = new List<TNFe>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TEnviNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TEnviNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(new SefazXmlTextWriter(memoryStream), this, SerializerHelpers.Namespace.Value);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TEnviNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TEnviNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TEnviNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TEnviNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TEnviNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TEnviNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TEnviNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TEnviNFe Deserialize(Stream s)
        {
            return ((TEnviNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TEnviNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TEnviNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TEnviNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TEnviNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TEnviNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TEnviNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TEnviNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public enum IndicadorEnvioSincrono
    {

        /// <remarks/>
        [XmlEnumAttribute("0")]
        Nao,

        /// <remarks/>
        [XmlEnumAttribute("1")]
        Sim,
    }

    /// <summary>
    /// Tipo Retorno do Pedido de Autorização da Nota Fiscal Eletrônica
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true, ElementName = "retEnviNFe")]
    public partial class TRetEnviNFe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Identificação do Ambiente:
        /// 1 - Produção
        /// 2 - Homologação
        /// </summary>
        [XmlElement(Order = 0)]
        public AmbienteSefaz tpAmb { get; set; }
        /// <summary>
        /// Versão do Aplicativo que recebeu o Lote.
        /// </summary>
        [XmlElement(Order = 1)]
        public string verAplic { get; set; }
        /// <summary>
        /// Código do status da mensagem enviada.
        /// </summary>
        [XmlElement(Order = 2)]
        public string cStat { get; set; }
        /// <summary>
        /// Descrição literal do status do serviço solicitado.
        /// </summary>
        [XmlElement(Order = 3)]
        public string xMotivo { get; set; }
        /// <summary>
        /// código da UF de atendimento
        /// </summary>
        [XmlElement(Order = 4)]
        public CodUfIbge cUF { get; set; }
        /// <summary>
        /// Data e hora do recebimento, no formato AAAA-MM-DDTHH:MM:SSTZD
        /// </summary>
        [XmlElement(Order = 5)]
        public string dhRecbto { get; set; }
        [XmlElement("infRec", typeof(TRetEnviNFeInfRec), Order = 6)]
        [XmlElement("protNFe", typeof(TProtNFe), Order = 6)]
        public object Item { get; set; }

        [XmlAttribute]
        public string versao { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TRetEnviNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetEnviNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetEnviNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetEnviNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TRetEnviNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TRetEnviNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TRetEnviNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TRetEnviNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TRetEnviNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TRetEnviNFe Deserialize(Stream s)
        {
            return ((TRetEnviNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TRetEnviNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetEnviNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetEnviNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TRetEnviNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TRetEnviNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetEnviNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetEnviNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Dados do Recibo do Lote
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.portalfiscal.inf.br/nfe")]
    public partial class TRetEnviNFeInfRec
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Número do Recibo
        /// </summary>
        [XmlElement(Order = 0)]
        public string nRec { get; set; }
        /// <summary>
        /// Tempo médio de resposta do serviço (em segundos) dos últimos 5 minutos
        /// </summary>
        [XmlElement(Order = 1)]
        public string tMed { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TRetEnviNFeInfRec));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetEnviNFeInfRec object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetEnviNFeInfRec object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetEnviNFeInfRec object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TRetEnviNFeInfRec obj, out Exception exception)
        {
            exception = null;
            obj = default(TRetEnviNFeInfRec);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TRetEnviNFeInfRec obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TRetEnviNFeInfRec Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TRetEnviNFeInfRec)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TRetEnviNFeInfRec Deserialize(Stream s)
        {
            return ((TRetEnviNFeInfRec)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TRetEnviNFeInfRec object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetEnviNFeInfRec object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetEnviNFeInfRec object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TRetEnviNFeInfRec obj, out Exception exception)
        {
            exception = null;
            obj = default(TRetEnviNFeInfRec);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetEnviNFeInfRec obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetEnviNFeInfRec LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo Pedido de Consulta do Recido do Lote de Notas Fiscais Eletrônicas
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true, ElementName = "consReciNFe")]
    public partial class TConsReciNFe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Identificação do Ambiente:
        /// 1 - Produção
        /// 2 - Homologação
        /// </summary>
        [XmlElement(Order = 0)]
        public AmbienteSefaz tpAmb { get; set; }
        /// <summary>
        /// Número do Recibo
        /// </summary>
        [XmlElement(Order = 1)]
        public string nRec { get; set; }
        [XmlAttribute]
        public string versao { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TConsReciNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TConsReciNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TConsReciNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TConsReciNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TConsReciNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TConsReciNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TConsReciNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TConsReciNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TConsReciNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TConsReciNFe Deserialize(Stream s)
        {
            return ((TConsReciNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TConsReciNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TConsReciNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TConsReciNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TConsReciNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TConsReciNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TConsReciNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TConsReciNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo Retorno do Pedido de  Consulta do Recido do Lote de Notas Fiscais Eletrônicas
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true, ElementName = "retConsReciNFe")]
    public partial class TRetConsReciNFe
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Identificação do Ambiente:
        /// 1 - Produção
        /// 2 - Homologação
        /// </summary>
        [XmlElement(Order = 0)]
        public AmbienteSefaz tpAmb { get; set; }
        /// <summary>
        /// Versão do Aplicativo que processou a NF-e
        /// </summary>
        [XmlElement(Order = 1)]
        public string verAplic { get; set; }
        /// <summary>
        /// Número do Recibo Consultado
        /// </summary>
        [XmlElement(Order = 2)]
        public string nRec { get; set; }
        /// <summary>
        /// Código do status da mensagem enviada.
        /// </summary>
        [XmlElement(Order = 3)]
        public string cStat { get; set; }
        /// <summary>
        /// Descrição literal do status do serviço solicitado.
        /// </summary>
        [XmlElement(Order = 4)]
        public string xMotivo { get; set; }
        /// <summary>
        /// código da UF de atendimento
        /// </summary>
        [XmlElement(Order = 5)]
        public CodUfIbge cUF { get; set; }
        /// <summary>
        /// Data e hora de processamento, no formato AAAA-MM-DDTHH:MM:SSTZD. Em caso de Rejeição, com data e hora do recebimento do Lote de NF-e enviado.
        /// </summary>
        [XmlElement(Order = 6)]
        public string dhRecbto { get; set; }
        /// <summary>
        /// Código da Mensagem (v2.0)
        /// alterado para tamanho variavel 1-4. (NT2011/004)
        /// </summary>
        [XmlElement(Order = 7)]
        public string cMsg { get; set; }
        /// <summary>
        /// Mensagem da SEFAZ para o emissor. (v2.0)
        /// </summary>
        [XmlElement(Order = 8)]
        public string xMsg { get; set; }
        /// <summary>
        /// Protocolo de status resultado do processamento da NF-e
        /// </summary>
        [XmlElement("protNFe", Order = 9)]
        public List<TProtNFe> protNFe { get; set; }
        [XmlAttribute]
        public string versao { get; set; }

        /// <summary>
        /// TRetConsReciNFe class constructor
        /// </summary>
        public TRetConsReciNFe()
        {
            protNFe = new List<TProtNFe>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TRetConsReciNFe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TRetConsReciNFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TRetConsReciNFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TRetConsReciNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TRetConsReciNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TRetConsReciNFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TRetConsReciNFe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TRetConsReciNFe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TRetConsReciNFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TRetConsReciNFe Deserialize(Stream s)
        {
            return ((TRetConsReciNFe)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TRetConsReciNFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TRetConsReciNFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TRetConsReciNFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TRetConsReciNFe obj, out Exception exception)
        {
            exception = null;
            obj = default(TRetConsReciNFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TRetConsReciNFe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TRetConsReciNFe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Tipo da NF-e processada
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe")]
    [XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/nfe", IsNullable = true, ElementName = "nfeProc")]
    public partial class NFeProcessada
    {

        private static XmlSerializer serializer;

        [XmlElement(Order = 0)]
        public TNFe NFe { get; set; }
        [XmlElement(Order = 1)]
        public TProtNFe protNFe { get; set; }
        [XmlAttribute]
        public string versao { get; set; }

        /// <summary>
        /// TNfeProc class constructor
        /// </summary>
        public NFeProcessada()
        {
            protNFe = new TProtNFe();
            NFe = new TNFe();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NFeProcessada));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNfeProc object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TNfeProc object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NFeProcessada obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeProcessada);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NFeProcessada obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NFeProcessada Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((NFeProcessada)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NFeProcessada Deserialize(Stream s)
        {
            return ((NFeProcessada)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TNfeProc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNfeProc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNfeProc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NFeProcessada obj, out Exception exception)
        {
            exception = null;
            obj = default(NFeProcessada);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NFeProcessada obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NFeProcessada LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
